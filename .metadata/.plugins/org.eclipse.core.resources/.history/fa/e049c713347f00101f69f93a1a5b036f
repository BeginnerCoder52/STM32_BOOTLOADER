/* APP_OLD LinkerScript.ld (STM32F103C8Tx - 64KB FLASH, 20KB RAM)
   - 55KB code (FLASH_APP_OLD_CODE)
   - 1KB metadata at the end (FLASH_APP_OLD_META)
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Configure your APP_OLD base here.
   Example: if bootloader takes 8KB (0x2000), APP_OLD can start at 0x08002000.
   55KB code + 1KB meta = 56KB total -> fits in 64KB device. */
APP_OLD_START = 0x08002000;      /* <- CHANGE THIS IF NEEDED */

/* RAM end for stack */
_estack = ORIGIN(RAM) + LENGTH(RAM);

/* Heap/Stack sizes (tune as needed) */
_Min_Heap_Size  = 0x200; /* 512 B */
_Min_Stack_Size = 0x400; /* 1 KB  */

/* Memories definition */
MEMORY
{
  /* 55KB code region for APP_OLD */
  FLASH_APP_OLD_CODE (rx) : ORIGIN = APP_OLD_START,            LENGTH = 55K
  /* 1KB metadata region immediately after code region */
  FLASH_APP_OLD_META (rx) : ORIGIN = APP_OLD_START + 55K,      LENGTH = 1K

  /* 20KB RAM */
  RAM (xrw) : ORIGIN = 0x20000000, LENGTH = 20K
}

/* Sections */
SECTIONS
{
  /* Vector table and code in APP_OLD code region */
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector))
    . = ALIGN(4);
  } > FLASH_APP_OLD_CODE

  .text :
  {
    . = ALIGN(4);
    *(.text) *(.text*)
    *(.glue_7) *(.glue_7t)
    *(.eh_frame)

    KEEP(*(.init))
    KEEP(*(.fini))

    . = ALIGN(4);
    _etext = .;
  } > FLASH_APP_OLD_CODE

  .rodata :
  {
    . = ALIGN(4);
    *(.rodata) *(.rodata*)
    . = ALIGN(4);
  } > FLASH_APP_OLD_CODE

  .ARM.extab (READONLY) :
  {
    . = ALIGN(4);
    *(.ARM.extab* .gnu.linkonce.armextab.*)
    . = ALIGN(4);
  } > FLASH_APP_OLD_CODE

  .ARM (READONLY) :
  {
    . = ALIGN(4);
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
    . = ALIGN(4);
  } > FLASH_APP_OLD_CODE

  .preinit_array (READONLY) :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN(__preinit_array_start = .);
    KEEP(*(.preinit_array*))
    PROVIDE_HIDDEN(__preinit_array_end = .);
    . = ALIGN(4);
  } > FLASH_APP_OLD_CODE

  .init_array (READONLY) :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN(__init_array_start = .);
    KEEP(*(SORT(.init_array.*)))
    KEEP(*(.init_array*))
    PROVIDE_HIDDEN(__init_array_end = .);
    . = ALIGN(4);
  } > FLASH_APP_OLD_CODE

  .fini_array (READONLY) :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN(__fini_array_start = .);
    KEEP(*(SORT(.fini_array.*)))
    KEEP(*(.fini_array*))
    PROVIDE_HIDDEN(__fini_array_end = .);
    . = ALIGN(4);
  } > FLASH_APP_OLD_CODE

  /* Used by the startup to initialize .data (load address in flash) */
  _sidata = LOADADDR(.data);

  .data : AT (ADDR(.rodata) + SIZEOF(.rodata))
  {
    . = ALIGN(4);
    _sdata = .;
    *(.data) *(.data*)
    *(.RamFunc) *(.RamFunc*)
    . = ALIGN(4);
    _edata = .;
  } > RAM

  . = ALIGN(4);
  .bss :
  {
    _sbss = .;
    __bss_start__ = _sbss;
    *(.bss) *(.bss*) *(COMMON)
    . = ALIGN(4);
    _ebss = .;
    __bss_end__ = _ebss;
  } > RAM

  /* User heap/stack */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE(end = .);
    PROVIDE(_end = .);
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } > RAM

  /* Dedicated 1KB metadata section placed at the last page */
  .app_old_metadata ORIGIN(FLASH_APP_OLD_META) :
  {
    . = ALIGN(4);
    /* Place anything you explicitly tag as .app_metadata here, if desired */
    KEEP(*(.app_metadata))
    . = ALIGN(4);
  } > FLASH_APP_OLD_META

  /* Export the metadata base address for C code */
  PROVIDE(__app_old_meta_start = ORIGIN(FLASH_APP_OLD_META));
  PROVIDE(__app_old_meta_end   = ORIGIN(FLASH_APP_OLD_META) + LENGTH(FLASH_APP_OLD_META));

  /* Strip unused stuff from standard libs */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a  ( * )
    libgcc.a( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
