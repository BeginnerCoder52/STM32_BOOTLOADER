#include "stm32f103xx.h"  // pulls in all your drivers
#include "app_meta.h"     // our new metadata header

USART_Handle_t husart1;
GPIO_Handle_t ledA7;

static void delay_ms(uint32_t ms);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void my_system_reset(void);

int main(void)
{
    RCC_DeInit();
    MX_GPIO_Init();
    MX_USART1_UART_Init();

    const char msg[] = "APP_OLD running\r\n";
    USART_SendData(&husart1, (uint8_t*)msg, sizeof(msg)-1);

    for (;;)
    {
        GPIO_WritePin(GPIOA, GPIO_PIN_NO_7, 1);
        delay_ms(250);
        GPIO_WritePin(GPIOA, GPIO_PIN_NO_7, 0);
        delay_ms(250);

        uint8_t ch;
        if (USART_ReceiveDataIT(&husart1, &ch, 1) == USART_READY && ch == 'U')
        {
            app_meta_t meta = {
                .magic = META_MAGIC,
                .flag = META_FLAG_FW_READY,
                .version = 0x00010000,
                .crc32 = 0
            };
            app_meta_write(APP_CURRENT_META_ADDR, &meta);

            my_system_reset();
        }
    }
}

// --- Rest of init & utils here ---

static void MX_GPIO_Init(void)
{
    ledA7.pGPIOx = GPIOA;
    ledA7.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
    ledA7.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
    ledA7.GPIO_PinConfig.GPIO_PinCfgMode = GPIO_CFG_OUT_GE_PP;
    ledA7.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
    GPIO_Init(&ledA7);
}

static void MX_USART1_UART_Init(void)
{
    husart1.pUSARTx = USART1;
    husart1.USART_Config.USART_Mode = USART_MODE_TXRX;
    husart1.USART_Config.USART_Baudrate = 115200;
    husart1.USART_Config.USART_NumberOfStopBits = USART_STOPBITS_1;
    husart1.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
    husart1.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
    husart1.USART_Config.USART_HWFLowControl = USART_HW_FLOW_CTRL_NONE;
    USART_Init(&husart1);
    USART_Start(husart1.pUSARTx);
}

static void delay_ms(uint32_t ms)
{
    for (volatile uint32_t i=0; i < ms*8000; i++);
}

static inline void my_system_reset(void)
{
    #define AIRCR_VECTKEY_MASK    (0x5FA << 16)
    #define SCB_AIRCR             (*(volatile uint32_t*)0xE000ED0C)
    SCB_AIRCR = AIRCR_VECTKEY_MASK | (1 << 2);
    while (1) { __asm("nop"); }
}
