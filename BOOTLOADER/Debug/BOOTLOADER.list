
BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001578  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080016a8  080016a8  000026a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001828  08001828  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001828  08001828  00002828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001830  08001830  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001830  08001830  00002830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001834  08001834  00002834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001838  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000054  0800188c  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800188c  00003430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000278e  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b04  00000000  00000000  0000580b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00006310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000263  00000000  00000000  00006658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003597  00000000  00000000  000068bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003dd5  00000000  00000000  00009e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c0c8  00000000  00000000  0000dc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00019cef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dcc  00000000  00000000  00019d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0001ab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000054 	.word	0x20000054
 800014c:	00000000 	.word	0x00000000
 8000150:	08001690 	.word	0x08001690

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000058 	.word	0x20000058
 800016c:	08001690 	.word	0x08001690

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <UART_Init>:
#define SYSTICK_CTRL    (*(volatile uint32_t*)(SYSTICK_BASE + 0x00))

/* AIRCR for reset/system control if needed */
#define SCB_AIRCR       (*(volatile uint32_t*)(SCB_BASE + 0x0C))

void UART_Init(void) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
    GPIO_Handle_t hgpio;

    GPIOA_PCLK_EN();
 800019a:	4b27      	ldr	r3, [pc, #156]	@ (8000238 <UART_Init+0xa4>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a26      	ldr	r2, [pc, #152]	@ (8000238 <UART_Init+0xa4>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
    USART1_PCLK_EN();
 80001a6:	4b24      	ldr	r3, [pc, #144]	@ (8000238 <UART_Init+0xa4>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a23      	ldr	r2, [pc, #140]	@ (8000238 <UART_Init+0xa4>)
 80001ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001b0:	6193      	str	r3, [r2, #24]

    hgpio.pGPIOx = GPIOA;
 80001b2:	4b22      	ldr	r3, [pc, #136]	@ (800023c <UART_Init+0xa8>)
 80001b4:	607b      	str	r3, [r7, #4]
    hgpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 80001b6:	2309      	movs	r3, #9
 80001b8:	723b      	strb	r3, [r7, #8]
    hgpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001ba:	2307      	movs	r3, #7
 80001bc:	727b      	strb	r3, [r7, #9]
    hgpio.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALT_MODE_USART_TX_FULLDUP;
 80001be:	2300      	movs	r3, #0
 80001c0:	737b      	strb	r3, [r7, #13]
    hgpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001c2:	2303      	movs	r3, #3
 80001c4:	72fb      	strb	r3, [r7, #11]
    hgpio.GPIO_PinConfig.GPIO_PinPuPdControl = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	733b      	strb	r3, [r7, #12]
    GPIO_Init(&hgpio);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 fd27 	bl	8000c20 <GPIO_Init>

    hgpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 80001d2:	230a      	movs	r3, #10
 80001d4:	723b      	strb	r3, [r7, #8]
    hgpio.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALT_MODE_USART_RX_FULLDUP;
 80001d6:	2302      	movs	r3, #2
 80001d8:	737b      	strb	r3, [r7, #13]
    hgpio.GPIO_PinConfig.GPIO_PinSpeed = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	72fb      	strb	r3, [r7, #11]
    GPIO_Init(&hgpio);
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fd1d 	bl	8000c20 <GPIO_Init>

    husart1.pUSARTx = USART1;
 80001e6:	4b16      	ldr	r3, [pc, #88]	@ (8000240 <UART_Init+0xac>)
 80001e8:	4a16      	ldr	r2, [pc, #88]	@ (8000244 <UART_Init+0xb0>)
 80001ea:	601a      	str	r2, [r3, #0]
    husart1.USART_Config.USART_Mode = USART_MODE_TXRX;
 80001ec:	4b14      	ldr	r3, [pc, #80]	@ (8000240 <UART_Init+0xac>)
 80001ee:	2202      	movs	r2, #2
 80001f0:	711a      	strb	r2, [r3, #4]
    husart1.USART_Config.USART_Baudrate = USART_STD_BAUD_115200;
 80001f2:	4b13      	ldr	r3, [pc, #76]	@ (8000240 <UART_Init+0xac>)
 80001f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001f8:	609a      	str	r2, [r3, #8]
    husart1.USART_Config.USART_NumberOfStopBits = USART_STOPBITS_1;
 80001fa:	4b11      	ldr	r3, [pc, #68]	@ (8000240 <UART_Init+0xac>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	731a      	strb	r2, [r3, #12]
    husart1.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000200:	4b0f      	ldr	r3, [pc, #60]	@ (8000240 <UART_Init+0xac>)
 8000202:	2200      	movs	r2, #0
 8000204:	735a      	strb	r2, [r3, #13]
    husart1.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <UART_Init+0xac>)
 8000208:	2200      	movs	r2, #0
 800020a:	739a      	strb	r2, [r3, #14]
    husart1.USART_Config.USART_HWFLowControl = USART_HW_FLOW_CTRL_NONE;
 800020c:	4b0c      	ldr	r3, [pc, #48]	@ (8000240 <UART_Init+0xac>)
 800020e:	2200      	movs	r2, #0
 8000210:	73da      	strb	r2, [r3, #15]
    USART_Init(&husart1);
 8000212:	480b      	ldr	r0, [pc, #44]	@ (8000240 <UART_Init+0xac>)
 8000214:	f001 f832 	bl	800127c <USART_Init>
    USART_ReceiveDataIT(&husart1, rx_buffer, RX_BUFFER_SIZE);
 8000218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800021c:	490a      	ldr	r1, [pc, #40]	@ (8000248 <UART_Init+0xb4>)
 800021e:	4808      	ldr	r0, [pc, #32]	@ (8000240 <UART_Init+0xac>)
 8000220:	f001 f954 	bl	80014cc <USART_ReceiveDataIT>
    USART_Start(husart1.pUSARTx);
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <UART_Init+0xac>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f001 f817 	bl	800125c <USART_Start>
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800
 8000240:	20000070 	.word	0x20000070
 8000244:	40013800 	.word	0x40013800
 8000248:	200000a0 	.word	0x200000a0

0800024c <GPIO_Init_LED>:

void GPIO_Init_LED(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    GPIOC_PCLK_EN();
 8000250:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <GPIO_Init_LED+0x48>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a0f      	ldr	r2, [pc, #60]	@ (8000294 <GPIO_Init_LED+0x48>)
 8000256:	f043 0310 	orr.w	r3, r3, #16
 800025a:	6193      	str	r3, [r2, #24]
    hgpio_led.pGPIOx = GPIOC;
 800025c:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <GPIO_Init_LED+0x4c>)
 800025e:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <GPIO_Init_LED+0x50>)
 8000260:	601a      	str	r2, [r3, #0]
    hgpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000262:	4b0d      	ldr	r3, [pc, #52]	@ (8000298 <GPIO_Init_LED+0x4c>)
 8000264:	220d      	movs	r2, #13
 8000266:	711a      	strb	r2, [r3, #4]
    hgpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <GPIO_Init_LED+0x4c>)
 800026a:	2201      	movs	r2, #1
 800026c:	715a      	strb	r2, [r3, #5]
    hgpio_led.GPIO_PinConfig.GPIO_PinCfgMode = GPIO_CFG_OUT_GE_PP;
 800026e:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <GPIO_Init_LED+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	719a      	strb	r2, [r3, #6]
    hgpio_led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000274:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <GPIO_Init_LED+0x4c>)
 8000276:	2202      	movs	r2, #2
 8000278:	71da      	strb	r2, [r3, #7]
    hgpio_led.GPIO_PinConfig.GPIO_PinPuPdControl = 0;
 800027a:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <GPIO_Init_LED+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	721a      	strb	r2, [r3, #8]
    GPIO_Init(&hgpio_led);
 8000280:	4805      	ldr	r0, [pc, #20]	@ (8000298 <GPIO_Init_LED+0x4c>)
 8000282:	f000 fccd 	bl	8000c20 <GPIO_Init>
    GPIO_WritePin(GPIOC, GPIO_PIN_NO_13, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	210d      	movs	r1, #13
 800028a:	4804      	ldr	r0, [pc, #16]	@ (800029c <GPIO_Init_LED+0x50>)
 800028c:	f000 fe78 	bl	8000f80 <GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	20000094 	.word	0x20000094
 800029c:	40011000 	.word	0x40011000

080002a0 <LED_Toggle>:

void LED_Toggle(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    GPIO_Toggle(GPIOC, GPIO_PIN_NO_13);
 80002a4:	210d      	movs	r1, #13
 80002a6:	4802      	ldr	r0, [pc, #8]	@ (80002b0 <LED_Toggle+0x10>)
 80002a8:	f000 fe8e 	bl	8000fc8 <GPIO_Toggle>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40011000 	.word	0x40011000

080002b4 <Bootloader_Init>:

void Bootloader_Init(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    UART_Init();
 80002b8:	f7ff ff6c 	bl	8000194 <UART_Init>
    GPIO_Init_LED();
 80002bc:	f7ff ffc6 	bl	800024c <GPIO_Init_LED>
    bl_state = BL_STATE_IDLE;
 80002c0:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <Bootloader_Init+0x24>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
    rx_index = 0;
 80002c6:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <Bootloader_Init+0x28>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	801a      	strh	r2, [r3, #0]
    cmd_ready = false;
 80002cc:	4b04      	ldr	r3, [pc, #16]	@ (80002e0 <Bootloader_Init+0x2c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	200002e3 	.word	0x200002e3
 80002dc:	200002e0 	.word	0x200002e0
 80002e0:	200002e2 	.word	0x200002e2

080002e4 <Send_Response>:

void Send_Response(const char* response) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
    USART_SendData(&husart1, (uint8_t*)response, strlen(response));
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff49 	bl	8000184 <strlen>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <Send_Response+0x24>)
 80002fa:	f001 f89d 	bl	8001438 <USART_SendData>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000070 	.word	0x20000070

0800030c <Check_App_Valid>:

bool Check_App_Valid(uint32_t addr) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    uint32_t sp = *(volatile uint32_t*)(addr);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	61fb      	str	r3, [r7, #28]
    app_footer_t footer;
    read_footer(&footer);
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fad4 	bl	80008cc <read_footer>
    return (sp >= SRAM_BASEADDR && sp <= SRAM_BASEADDR + 0x5000 && footer.valid == 1);
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800032a:	d308      	bcc.n	800033e <Check_App_Valid+0x32>
 800032c:	69fb      	ldr	r3, [r7, #28]
 800032e:	4a08      	ldr	r2, [pc, #32]	@ (8000350 <Check_App_Valid+0x44>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d804      	bhi.n	800033e <Check_App_Valid+0x32>
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d101      	bne.n	800033e <Check_App_Valid+0x32>
 800033a:	2301      	movs	r3, #1
 800033c:	e000      	b.n	8000340 <Check_App_Valid+0x34>
 800033e:	2300      	movs	r3, #0
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	b2db      	uxtb	r3, r3
}
 8000346:	4618      	mov	r0, r3
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20005000 	.word	0x20005000

08000354 <Erase_App_Current>:

void Erase_App_Current(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
    uint32_t addr = APP_CURRENT_START;
 800035a:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <Erase_App_Current+0x38>)
 800035c:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < APP_CURRENT_SIZE; i += FLASH_PAGE_SIZE) {
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	e009      	b.n	8000378 <Erase_App_Current+0x24>
        FLASH_Erase(addr + i);
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4413      	add	r3, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fb96 	bl	8000a9c <FLASH_Erase>
    for (uint32_t i = 0; i < APP_CURRENT_SIZE; i += FLASH_PAGE_SIZE) {
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800037e:	d3f1      	bcc.n	8000364 <Erase_App_Current+0x10>
    }
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	08004000 	.word	0x08004000

08000390 <Process_FW_Request>:
        }
    }
    return checksum;
}

void Process_FW_Request(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    if (strcmp((char*)cmd_buffer, CMD_FW_REQUEST) == 0) {
 8000394:	4909      	ldr	r1, [pc, #36]	@ (80003bc <Process_FW_Request+0x2c>)
 8000396:	480a      	ldr	r0, [pc, #40]	@ (80003c0 <Process_FW_Request+0x30>)
 8000398:	f7ff feea 	bl	8000170 <strcmp>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d106      	bne.n	80003b0 <Process_FW_Request+0x20>
        Send_Response(RESP_FW_READY);
 80003a2:	4808      	ldr	r0, [pc, #32]	@ (80003c4 <Process_FW_Request+0x34>)
 80003a4:	f7ff ff9e 	bl	80002e4 <Send_Response>
        bl_state = BL_STATE_WAIT_LENGTH;
 80003a8:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <Process_FW_Request+0x38>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
    } else {
        Send_Response(RESP_ERROR);
    }
}
 80003ae:	e002      	b.n	80003b6 <Process_FW_Request+0x26>
        Send_Response(RESP_ERROR);
 80003b0:	4806      	ldr	r0, [pc, #24]	@ (80003cc <Process_FW_Request+0x3c>)
 80003b2:	f7ff ff97 	bl	80002e4 <Send_Response>
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	080016a8 	.word	0x080016a8
 80003c0:	200002a0 	.word	0x200002a0
 80003c4:	080016b8 	.word	0x080016b8
 80003c8:	200002e3 	.word	0x200002e3
 80003cc:	080016c4 	.word	0x080016c4

080003d0 <Process_FW_Length>:

void Process_FW_Length(char* length_str) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    fw_size = strtoul(length_str + strlen(CMD_FW_LENGTH), NULL, 10);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	330a      	adds	r3, #10
 80003dc:	220a      	movs	r2, #10
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 f907 	bl	80015f4 <strtoul>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000428 <Process_FW_Length+0x58>)
 80003ea:	6013      	str	r3, [r2, #0]
    if (fw_size <= (APP_CURRENT_SIZE - FLASH_PAGE_SIZE)) {
 80003ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <Process_FW_Length+0x58>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80003f4:	d811      	bhi.n	800041a <Process_FW_Length+0x4a>
        Send_Response(RESP_FW_OK);
 80003f6:	480d      	ldr	r0, [pc, #52]	@ (800042c <Process_FW_Length+0x5c>)
 80003f8:	f7ff ff74 	bl	80002e4 <Send_Response>
        bl_state = BL_STATE_WAIT_DATA;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <Process_FW_Length+0x60>)
 80003fe:	2202      	movs	r2, #2
 8000400:	701a      	strb	r2, [r3, #0]
        fw_received = 0;
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <Process_FW_Length+0x64>)
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
        calculated_checksum = 0;
 8000408:	4b0b      	ldr	r3, [pc, #44]	@ (8000438 <Process_FW_Length+0x68>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
        current_flash_addr = APP_CURRENT_START;
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <Process_FW_Length+0x6c>)
 8000410:	4a0b      	ldr	r2, [pc, #44]	@ (8000440 <Process_FW_Length+0x70>)
 8000412:	601a      	str	r2, [r3, #0]
        Erase_App_Current();
 8000414:	f7ff ff9e 	bl	8000354 <Erase_App_Current>
    } else {
        Send_Response(RESP_ERROR);
    }
}
 8000418:	e002      	b.n	8000420 <Process_FW_Length+0x50>
        Send_Response(RESP_ERROR);
 800041a:	480a      	ldr	r0, [pc, #40]	@ (8000444 <Process_FW_Length+0x74>)
 800041c:	f7ff ff62 	bl	80002e4 <Send_Response>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200002e4 	.word	0x200002e4
 800042c:	080016cc 	.word	0x080016cc
 8000430:	200002e3 	.word	0x200002e3
 8000434:	200002e8 	.word	0x200002e8
 8000438:	200002f0 	.word	0x200002f0
 800043c:	20000000 	.word	0x20000000
 8000440:	08004000 	.word	0x08004000
 8000444:	080016c4 	.word	0x080016c4

08000448 <flash_program_halfword>:
static bool     s_have_lo_byte = false;
static uint8_t  s_lo_byte = 0;

/* Ghi half-word, KHÔNG erase trang (trang đã erase trước đó) */
static inline int flash_program_halfword(uint32_t addr, uint16_t half)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	807b      	strh	r3, [r7, #2]
    // Wait not busy
    while (FLASH->SR & (1 << FLASH_SR_BSY));
 8000454:	bf00      	nop
 8000456:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <flash_program_halfword+0x70>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1f9      	bne.n	8000456 <flash_program_halfword+0xe>
    // Clear flags
    FLASH->SR |= (1 << FLASH_SR_EOP) | (1 << FLASH_SR_PGERR) | (1 << FLASH_SR_WRPRTERR);
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <flash_program_halfword+0x70>)
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	4a14      	ldr	r2, [pc, #80]	@ (80004b8 <flash_program_halfword+0x70>)
 8000468:	f043 030e 	orr.w	r3, r3, #14
 800046c:	60d3      	str	r3, [r2, #12]
    // Program
    FLASH->CR |= (1 << FLASH_CR_PG);
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <flash_program_halfword+0x70>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <flash_program_halfword+0x70>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6113      	str	r3, [r2, #16]
    *(volatile uint16_t*)addr = half;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	887a      	ldrh	r2, [r7, #2]
 800047e:	801a      	strh	r2, [r3, #0]
    while (FLASH->SR & (1 << FLASH_SR_BSY));
 8000480:	bf00      	nop
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <flash_program_halfword+0x70>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1f9      	bne.n	8000482 <flash_program_halfword+0x3a>
    FLASH->CR &= ~(1 << FLASH_CR_PG);
 800048e:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <flash_program_halfword+0x70>)
 8000490:	691b      	ldr	r3, [r3, #16]
 8000492:	4a09      	ldr	r2, [pc, #36]	@ (80004b8 <flash_program_halfword+0x70>)
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	6113      	str	r3, [r2, #16]
    return (FLASH->SR & (1 << FLASH_SR_PGERR)) ? -1 : 0;
 800049a:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <flash_program_halfword+0x70>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d002      	beq.n	80004ac <flash_program_halfword+0x64>
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	e000      	b.n	80004ae <flash_program_halfword+0x66>
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40022000 	.word	0x40022000

080004bc <Process_FW_Data>:

void Process_FW_Data(uint8_t* data, uint16_t length)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	807b      	strh	r3, [r7, #2]
    if (length != 1 || fw_received >= fw_size) {
 80004c8:	887b      	ldrh	r3, [r7, #2]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d105      	bne.n	80004da <Process_FW_Data+0x1e>
 80004ce:	4b3e      	ldr	r3, [pc, #248]	@ (80005c8 <Process_FW_Data+0x10c>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b3e      	ldr	r3, [pc, #248]	@ (80005cc <Process_FW_Data+0x110>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d303      	bcc.n	80004e2 <Process_FW_Data+0x26>
        Send_Response(RESP_ERROR);
 80004da:	483d      	ldr	r0, [pc, #244]	@ (80005d0 <Process_FW_Data+0x114>)
 80004dc:	f7ff ff02 	bl	80002e4 <Send_Response>
        return;
 80004e0:	e06e      	b.n	80005c0 <Process_FW_Data+0x104>
    }

    uint8_t b = data[0];
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	73fb      	strb	r3, [r7, #15]

    // Cộng checksum theo byte
    calculated_checksum += b;
 80004e8:	7bfa      	ldrb	r2, [r7, #15]
 80004ea:	4b3a      	ldr	r3, [pc, #232]	@ (80005d4 <Process_FW_Data+0x118>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	4a38      	ldr	r2, [pc, #224]	@ (80005d4 <Process_FW_Data+0x118>)
 80004f2:	6013      	str	r3, [r2, #0]

    if (!s_have_lo_byte) {
 80004f4:	4b38      	ldr	r3, [pc, #224]	@ (80005d8 <Process_FW_Data+0x11c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <Process_FW_Data+0x54>
        // Lưu byte thấp, chưa ghi flash
        s_lo_byte = b;
 8000502:	4a36      	ldr	r2, [pc, #216]	@ (80005dc <Process_FW_Data+0x120>)
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	7013      	strb	r3, [r2, #0]
        s_have_lo_byte = true;
 8000508:	4b33      	ldr	r3, [pc, #204]	@ (80005d8 <Process_FW_Data+0x11c>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e022      	b.n	8000556 <Process_FW_Data+0x9a>
    } else {
        // Có đủ 2 byte -> ghép half-word và ghi
        uint16_t half = (uint16_t)(s_lo_byte | ((uint16_t)b << 8));
 8000510:	4b32      	ldr	r3, [pc, #200]	@ (80005dc <Process_FW_Data+0x120>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b21a      	sxth	r2, r3
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	b21b      	sxth	r3, r3
 800051a:	021b      	lsls	r3, r3, #8
 800051c:	b21b      	sxth	r3, r3
 800051e:	4313      	orrs	r3, r2
 8000520:	b21b      	sxth	r3, r3
 8000522:	81bb      	strh	r3, [r7, #12]
        if (flash_program_halfword(current_flash_addr, half) != 0) {
 8000524:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <Process_FW_Data+0x124>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	89ba      	ldrh	r2, [r7, #12]
 800052a:	4611      	mov	r1, r2
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff8b 	bl	8000448 <flash_program_halfword>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <Process_FW_Data+0x8a>
            Send_Response(RESP_ERROR);
 8000538:	4825      	ldr	r0, [pc, #148]	@ (80005d0 <Process_FW_Data+0x114>)
 800053a:	f7ff fed3 	bl	80002e4 <Send_Response>
            bl_state = BL_STATE_IDLE;
 800053e:	4b29      	ldr	r3, [pc, #164]	@ (80005e4 <Process_FW_Data+0x128>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
            return;
 8000544:	e03c      	b.n	80005c0 <Process_FW_Data+0x104>
        }
        current_flash_addr += 2;
 8000546:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <Process_FW_Data+0x124>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	3302      	adds	r3, #2
 800054c:	4a24      	ldr	r2, [pc, #144]	@ (80005e0 <Process_FW_Data+0x124>)
 800054e:	6013      	str	r3, [r2, #0]
        s_have_lo_byte = false;
 8000550:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <Process_FW_Data+0x11c>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
    }

    fw_received += 1;
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <Process_FW_Data+0x10c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	4a1a      	ldr	r2, [pc, #104]	@ (80005c8 <Process_FW_Data+0x10c>)
 800055e:	6013      	str	r3, [r2, #0]
    Send_Response(RESP_FW_RECEIVED);
 8000560:	4821      	ldr	r0, [pc, #132]	@ (80005e8 <Process_FW_Data+0x12c>)
 8000562:	f7ff febf 	bl	80002e4 <Send_Response>

    if (fw_received >= fw_size) {
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <Process_FW_Data+0x10c>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <Process_FW_Data+0x110>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d326      	bcc.n	80005c0 <Process_FW_Data+0x104>
        // Nếu tổng byte là số lẻ -> pad 0xFF để hoàn tất half-word cuối
        if (s_have_lo_byte) {
 8000572:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <Process_FW_Data+0x11c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d01f      	beq.n	80005ba <Process_FW_Data+0xfe>
            uint16_t half = (uint16_t)(s_lo_byte | ((uint16_t)0xFF << 8));
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <Process_FW_Data+0x120>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b21b      	sxth	r3, r3
 8000580:	f063 03ff 	orn	r3, r3, #255	@ 0xff
 8000584:	b21b      	sxth	r3, r3
 8000586:	817b      	strh	r3, [r7, #10]
            if (flash_program_halfword(current_flash_addr, half) != 0) {
 8000588:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <Process_FW_Data+0x124>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	897a      	ldrh	r2, [r7, #10]
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff59 	bl	8000448 <flash_program_halfword>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d006      	beq.n	80005aa <Process_FW_Data+0xee>
                Send_Response(RESP_ERROR);
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <Process_FW_Data+0x114>)
 800059e:	f7ff fea1 	bl	80002e4 <Send_Response>
                bl_state = BL_STATE_IDLE;
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <Process_FW_Data+0x128>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
                return;
 80005a8:	e00a      	b.n	80005c0 <Process_FW_Data+0x104>
            }
            current_flash_addr += 2;
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <Process_FW_Data+0x124>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3302      	adds	r3, #2
 80005b0:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <Process_FW_Data+0x124>)
 80005b2:	6013      	str	r3, [r2, #0]
            s_have_lo_byte = false;
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <Process_FW_Data+0x11c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
        }
        bl_state = BL_STATE_WAIT_CHECKSUM;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <Process_FW_Data+0x128>)
 80005bc:	2203      	movs	r2, #3
 80005be:	701a      	strb	r2, [r3, #0]
    }
}
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200002e8 	.word	0x200002e8
 80005cc:	200002e4 	.word	0x200002e4
 80005d0:	080016c4 	.word	0x080016c4
 80005d4:	200002f0 	.word	0x200002f0
 80005d8:	200002f4 	.word	0x200002f4
 80005dc:	200002f5 	.word	0x200002f5
 80005e0:	20000000 	.word	0x20000000
 80005e4:	200002e3 	.word	0x200002e3
 80005e8:	080016d4 	.word	0x080016d4

080005ec <Process_FW_Checksum>:

void Process_FW_Checksum(char* checksum_str) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    fw_checksum = strtoul(checksum_str + strlen(CMD_CHECKSUM), NULL, 10);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3309      	adds	r3, #9
 80005f8:	220a      	movs	r2, #10
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fff9 	bl	80015f4 <strtoul>
 8000602:	4603      	mov	r3, r0
 8000604:	4a15      	ldr	r2, [pc, #84]	@ (800065c <Process_FW_Checksum+0x70>)
 8000606:	6013      	str	r3, [r2, #0]
    if (fw_checksum == calculated_checksum) {
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <Process_FW_Checksum+0x70>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <Process_FW_Checksum+0x74>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d118      	bne.n	8000646 <Process_FW_Checksum+0x5a>
        app_footer_t footer = {1, 0x00010000};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	2301      	movs	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	613b      	str	r3, [r7, #16]
        write_footer(&footer);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f936 	bl	80008a4 <write_footer>
        Send_Response(RESP_CHECKSUM_OK);
 8000638:	480a      	ldr	r0, [pc, #40]	@ (8000664 <Process_FW_Checksum+0x78>)
 800063a:	f7ff fe53 	bl	80002e4 <Send_Response>
        bl_state = BL_STATE_COMPLETE;
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <Process_FW_Checksum+0x7c>)
 8000640:	2204      	movs	r2, #4
 8000642:	701a      	strb	r2, [r3, #0]
    } else {
        Send_Response(RESP_CHECKSUM_ERR);
        bl_state = BL_STATE_IDLE;
    }
}
 8000644:	e005      	b.n	8000652 <Process_FW_Checksum+0x66>
        Send_Response(RESP_CHECKSUM_ERR);
 8000646:	4809      	ldr	r0, [pc, #36]	@ (800066c <Process_FW_Checksum+0x80>)
 8000648:	f7ff fe4c 	bl	80002e4 <Send_Response>
        bl_state = BL_STATE_IDLE;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <Process_FW_Checksum+0x7c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200002ec 	.word	0x200002ec
 8000660:	200002f0 	.word	0x200002f0
 8000664:	080016e4 	.word	0x080016e4
 8000668:	200002e3 	.word	0x200002e3
 800066c:	080016f4 	.word	0x080016f4

08000670 <Process_Command>:

void Process_Command(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    if (!cmd_ready) return;
 8000674:	4b31      	ldr	r3, [pc, #196]	@ (800073c <Process_Command+0xcc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f083 0301 	eor.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d159      	bne.n	8000738 <Process_Command+0xc8>

    cmd_buffer[rx_index] = '\0';
 8000684:	4b2e      	ldr	r3, [pc, #184]	@ (8000740 <Process_Command+0xd0>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <Process_Command+0xd4>)
 800068e:	2100      	movs	r1, #0
 8000690:	5499      	strb	r1, [r3, r2]
    cmd_ready = false;
 8000692:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <Process_Command+0xcc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
    rx_index = 0;
 8000698:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <Process_Command+0xd0>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]

    switch (bl_state) {
 800069e:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <Process_Command+0xd8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d840      	bhi.n	800072a <Process_Command+0xba>
 80006a8:	a201      	add	r2, pc, #4	@ (adr r2, 80006b0 <Process_Command+0x40>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c7 	.word	0x080006c7
 80006b8:	080006e7 	.word	0x080006e7
 80006bc:	0800070b 	.word	0x0800070b
        case BL_STATE_IDLE:
            Process_FW_Request();
 80006c0:	f7ff fe66 	bl	8000390 <Process_FW_Request>
            break;
 80006c4:	e039      	b.n	800073a <Process_Command+0xca>
        case BL_STATE_WAIT_LENGTH:
            if (strncmp((char*)cmd_buffer, CMD_FW_LENGTH, strlen(CMD_FW_LENGTH)) == 0) {
 80006c6:	220a      	movs	r2, #10
 80006c8:	4920      	ldr	r1, [pc, #128]	@ (800074c <Process_Command+0xdc>)
 80006ca:	481e      	ldr	r0, [pc, #120]	@ (8000744 <Process_Command+0xd4>)
 80006cc:	f000 ff9c 	bl	8001608 <strncmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d103      	bne.n	80006de <Process_Command+0x6e>
                Process_FW_Length((char*)cmd_buffer);
 80006d6:	481b      	ldr	r0, [pc, #108]	@ (8000744 <Process_Command+0xd4>)
 80006d8:	f7ff fe7a 	bl	80003d0 <Process_FW_Length>
            } else {
                Send_Response(RESP_ERROR);
            }
            break;
 80006dc:	e02d      	b.n	800073a <Process_Command+0xca>
                Send_Response(RESP_ERROR);
 80006de:	481c      	ldr	r0, [pc, #112]	@ (8000750 <Process_Command+0xe0>)
 80006e0:	f7ff fe00 	bl	80002e4 <Send_Response>
            break;
 80006e4:	e029      	b.n	800073a <Process_Command+0xca>
        case BL_STATE_WAIT_DATA:
            if (strncmp((char*)cmd_buffer, CMD_FW_DATA, strlen(CMD_FW_DATA)) == 0) {
 80006e6:	2208      	movs	r2, #8
 80006e8:	491a      	ldr	r1, [pc, #104]	@ (8000754 <Process_Command+0xe4>)
 80006ea:	4816      	ldr	r0, [pc, #88]	@ (8000744 <Process_Command+0xd4>)
 80006ec:	f000 ff8c 	bl	8001608 <strncmp>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d105      	bne.n	8000702 <Process_Command+0x92>
                Process_FW_Data(cmd_buffer + strlen(CMD_FW_DATA), 1);
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <Process_Command+0xe8>)
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fede 	bl	80004bc <Process_FW_Data>
            } else {
                Send_Response(RESP_ERROR);
            }
            break;
 8000700:	e01b      	b.n	800073a <Process_Command+0xca>
                Send_Response(RESP_ERROR);
 8000702:	4813      	ldr	r0, [pc, #76]	@ (8000750 <Process_Command+0xe0>)
 8000704:	f7ff fdee 	bl	80002e4 <Send_Response>
            break;
 8000708:	e017      	b.n	800073a <Process_Command+0xca>
        case BL_STATE_WAIT_CHECKSUM:
            if (strncmp((char*)cmd_buffer, CMD_CHECKSUM, strlen(CMD_CHECKSUM)) == 0) {
 800070a:	2209      	movs	r2, #9
 800070c:	4913      	ldr	r1, [pc, #76]	@ (800075c <Process_Command+0xec>)
 800070e:	480d      	ldr	r0, [pc, #52]	@ (8000744 <Process_Command+0xd4>)
 8000710:	f000 ff7a 	bl	8001608 <strncmp>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d103      	bne.n	8000722 <Process_Command+0xb2>
                Process_FW_Checksum((char*)cmd_buffer);
 800071a:	480a      	ldr	r0, [pc, #40]	@ (8000744 <Process_Command+0xd4>)
 800071c:	f7ff ff66 	bl	80005ec <Process_FW_Checksum>
            } else {
                Send_Response(RESP_ERROR);
            }
            break;
 8000720:	e00b      	b.n	800073a <Process_Command+0xca>
                Send_Response(RESP_ERROR);
 8000722:	480b      	ldr	r0, [pc, #44]	@ (8000750 <Process_Command+0xe0>)
 8000724:	f7ff fdde 	bl	80002e4 <Send_Response>
            break;
 8000728:	e007      	b.n	800073a <Process_Command+0xca>
        default:
            Send_Response(RESP_ERROR);
 800072a:	4809      	ldr	r0, [pc, #36]	@ (8000750 <Process_Command+0xe0>)
 800072c:	f7ff fdda 	bl	80002e4 <Send_Response>
            bl_state = BL_STATE_IDLE;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <Process_Command+0xd8>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
            break;
 8000736:	e000      	b.n	800073a <Process_Command+0xca>
    if (!cmd_ready) return;
 8000738:	bf00      	nop
    }
}
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200002e2 	.word	0x200002e2
 8000740:	200002e0 	.word	0x200002e0
 8000744:	200002a0 	.word	0x200002a0
 8000748:	200002e3 	.word	0x200002e3
 800074c:	08001704 	.word	0x08001704
 8000750:	080016c4 	.word	0x080016c4
 8000754:	08001710 	.word	0x08001710
 8000758:	200002a8 	.word	0x200002a8
 800075c:	0800171c 	.word	0x0800171c

08000760 <Jump_To_App>:

typedef void (*pFunction)(void);

void Jump_To_App(uint32_t addr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    uint32_t sp = *(volatile uint32_t*)(addr);      /* Initial MSP */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	617b      	str	r3, [r7, #20]
    uint32_t rv = *(volatile uint32_t*)(addr + 4);  /* Reset_Handler */
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3304      	adds	r3, #4
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	613b      	str	r3, [r7, #16]

    /* Stop SysTick */
    SYSTICK_CTRL = 0;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <Jump_To_App+0x38>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]

    /* Remap vector table */
    SCB_VTOR = addr;
 800077c:	4a07      	ldr	r2, [pc, #28]	@ (800079c <Jump_To_App+0x3c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]

    /* Set MSP directly */
    asm volatile ("msr msp, %0" :: "r" (sp) : );
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	f383 8808 	msr	MSP, r3

    /* Jump to Reset_Handler of the application */
    pFunction Jump = (pFunction)rv;
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	60fb      	str	r3, [r7, #12]
    Jump();
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4798      	blx	r3
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	e000e010 	.word	0xe000e010
 800079c:	e000ed08 	.word	0xe000ed08

080007a0 <Bootloader_Main>:
        rx_index = 0;
    }
    USART_ReceiveDataIT(pUSARTHandle, rx_buffer, RX_BUFFER_SIZE);
}

void Bootloader_Main(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
    Bootloader_Init();
 80007a6:	f7ff fd85 	bl	80002b4 <Bootloader_Init>

    if (Check_App_Valid(APP_CURRENT_START)) {
 80007aa:	4815      	ldr	r0, [pc, #84]	@ (8000800 <Bootloader_Main+0x60>)
 80007ac:	f7ff fdae 	bl	800030c <Check_App_Valid>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <Bootloader_Main+0x20>
        Jump_To_App(APP_CURRENT_START);
 80007b6:	4812      	ldr	r0, [pc, #72]	@ (8000800 <Bootloader_Main+0x60>)
 80007b8:	f7ff ffd2 	bl	8000760 <Jump_To_App>
        LED_Toggle();
 80007bc:	f7ff fd70 	bl	80002a0 <LED_Toggle>
    }

    while (1) {
        Process_Command();
 80007c0:	f7ff ff56 	bl	8000670 <Process_Command>

        for (volatile uint32_t i = 0; i < 500000; i++);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	e002      	b.n	80007d0 <Bootloader_Main+0x30>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3301      	adds	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000804 <Bootloader_Main+0x64>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d9f8      	bls.n	80007ca <Bootloader_Main+0x2a>
        if (bl_state == BL_STATE_COMPLETE) {
 80007d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <Bootloader_Main+0x68>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d1ee      	bne.n	80007c0 <Bootloader_Main+0x20>
            if (Check_App_Valid(APP_CURRENT_START)) {
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <Bootloader_Main+0x60>)
 80007e4:	f7ff fd92 	bl	800030c <Check_App_Valid>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <Bootloader_Main+0x58>
                Jump_To_App(APP_CURRENT_START);
 80007ee:	4804      	ldr	r0, [pc, #16]	@ (8000800 <Bootloader_Main+0x60>)
 80007f0:	f7ff ffb6 	bl	8000760 <Jump_To_App>
                LED_Toggle();
 80007f4:	f7ff fd54 	bl	80002a0 <LED_Toggle>
            }
            bl_state = BL_STATE_IDLE;
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <Bootloader_Main+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
        Process_Command();
 80007fe:	e7df      	b.n	80007c0 <Bootloader_Main+0x20>
 8000800:	08004000 	.word	0x08004000
 8000804:	0007a11f 	.word	0x0007a11f
 8000808:	200002e3 	.word	0x200002e3

0800080c <flash_unlock>:
#include "flash_if.h"
#include "stm32f103xx.h"
#include "bootloader.h"
#include <string.h>

void flash_unlock(void) {
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
    FLASH->CR &= ~(1 << FLASH_CR_LOCK);
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <flash_unlock+0x24>)
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <flash_unlock+0x24>)
 8000816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800081a:	6113      	str	r3, [r2, #16]
    FLASH->KEYR = 0x45670123;
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <flash_unlock+0x24>)
 800081e:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <flash_unlock+0x28>)
 8000820:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 8000822:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <flash_unlock+0x24>)
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <flash_unlock+0x2c>)
 8000826:	605a      	str	r2, [r3, #4]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40022000 	.word	0x40022000
 8000834:	45670123 	.word	0x45670123
 8000838:	cdef89ab 	.word	0xcdef89ab

0800083c <flash_lock>:

void flash_lock(void) {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    FLASH->CR |= (1 << FLASH_CR_LOCK);
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <flash_lock+0x18>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4a03      	ldr	r2, [pc, #12]	@ (8000854 <flash_lock+0x18>)
 8000846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084a:	6113      	str	r3, [r2, #16]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40022000 	.word	0x40022000

08000858 <flash_write>:
        page_addr += FLASH_PAGE_SIZE;
    }
    return FLASH_OK;
}

int flash_write(uint32_t addr, const uint8_t* data, uint32_t len) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
    uint32_t* data32 = (uint32_t*)data;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	617b      	str	r3, [r7, #20]
    uint16_t len32 = len / 4 + (len % 4 ? 1 : 0);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	089b      	lsrs	r3, r3, #2
 800086c:	b29b      	uxth	r3, r3
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	f002 0203 	and.w	r2, r2, #3
 8000874:	2a00      	cmp	r2, #0
 8000876:	d001      	beq.n	800087c <flash_write+0x24>
 8000878:	2201      	movs	r2, #1
 800087a:	e000      	b.n	800087e <flash_write+0x26>
 800087c:	2200      	movs	r2, #0
 800087e:	4413      	add	r3, r2
 8000880:	827b      	strh	r3, [r7, #18]
    return FLASH_Write_Data(addr, data32, len32) == FLASH_OK ? 0 : -1;
 8000882:	8a7b      	ldrh	r3, [r7, #18]
 8000884:	461a      	mov	r2, r3
 8000886:	6979      	ldr	r1, [r7, #20]
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f000 f897 	bl	80009bc <FLASH_Write_Data>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d101      	bne.n	8000898 <flash_write+0x40>
 8000894:	2300      	movs	r3, #0
 8000896:	e001      	b.n	800089c <flash_write+0x44>
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <write_footer>:
        checksum += data[i];
    }
    return checksum;
}

void write_footer(app_footer_t* footer) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    flash_unlock();
 80008ac:	f7ff ffae 	bl	800080c <flash_unlock>
    flash_write(APP_FLAGS_ADDR, (uint8_t*)footer, sizeof(app_footer_t));
 80008b0:	2214      	movs	r2, #20
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <write_footer+0x24>)
 80008b6:	f7ff ffcf 	bl	8000858 <flash_write>
    flash_lock();
 80008ba:	f7ff ffbf 	bl	800083c <flash_lock>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	08011c00 	.word	0x08011c00

080008cc <read_footer>:

void read_footer(app_footer_t* footer) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    memcpy(footer, (void*)APP_FLAGS_ADDR, sizeof(app_footer_t));
 80008d4:	2214      	movs	r2, #20
 80008d6:	4904      	ldr	r1, [pc, #16]	@ (80008e8 <read_footer+0x1c>)
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 fecb 	bl	8001674 <memcpy>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08011c00 	.word	0x08011c00

080008ec <main>:
#include "bootloader.h"

int main(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    RCC->CR |= (1 << 0);
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <main+0x38>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <main+0x38>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (1 << 1)));
 80008fc:	bf00      	nop
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <main+0x38>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <main+0x12>
    RCC->CFGR = (0x1 << 0);
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <main+0x38>)
 800090c:	2201      	movs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
    RCC->APB2ENR |= (1 << 0);
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <main+0x38>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a03      	ldr	r2, [pc, #12]	@ (8000924 <main+0x38>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6193      	str	r3, [r2, #24]

    Bootloader_Main();
 800091c:	f7ff ff40 	bl	80007a0 <Bootloader_Main>

    while (1);
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <main+0x34>
 8000924:	40021000 	.word	0x40021000

08000928 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800092c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000956:	f000 fe69 	bl	800162c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800095a:	f7ff ffc7 	bl	80008ec <main>

0800095e <LoopForever>:

LoopForever:
  b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800096c:	08001838 	.word	0x08001838
  ldr r2, =_sbss
 8000970:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000974:	20000430 	.word	0x20000430

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <FLASH_Unlock>:
 *      Author: nphuc
 */

#include "stm32f103xx_flash_driver.h"

static inline void FLASH_Unlock(){
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
    FLASH->KEYR = 0x45670123;
 8000980:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <FLASH_Unlock+0x18>)
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <FLASH_Unlock+0x1c>)
 8000984:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 8000986:	4b03      	ldr	r3, [pc, #12]	@ (8000994 <FLASH_Unlock+0x18>)
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <FLASH_Unlock+0x20>)
 800098a:	605a      	str	r2, [r3, #4]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40022000 	.word	0x40022000
 8000998:	45670123 	.word	0x45670123
 800099c:	cdef89ab 	.word	0xcdef89ab

080009a0 <FLASH_Lock>:

static inline void FLASH_Lock(){
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
    FLASH->CR |= (1 << FLASH_CR_LOCK);
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <FLASH_Lock+0x18>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	4a03      	ldr	r2, [pc, #12]	@ (80009b8 <FLASH_Lock+0x18>)
 80009aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ae:	6113      	str	r3, [r2, #16]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	40022000 	.word	0x40022000

080009bc <FLASH_Write_Data>:

uint8_t FLASH_Write_Data(uint32_t PageAddress, uint32_t *pTxBuffer, uint16_t length){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	4613      	mov	r3, r2
 80009c8:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 80009ca:	f7ff ffd7 	bl	800097c <FLASH_Unlock>
	uint8_t oldPage = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	77fb      	strb	r3, [r7, #31]
    while(length > 0){
 80009d2:	e057      	b.n	8000a84 <FLASH_Write_Data+0xc8>
    	uint8_t currentPage = (PageAddress / 0x0400) & 0x0FF;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	0a9b      	lsrs	r3, r3, #10
 80009d8:	77bb      	strb	r3, [r7, #30]
    	uint32_t pageBaseAddress = 0x08000000 + currentPage * 0x400;
 80009da:	7fbb      	ldrb	r3, [r7, #30]
 80009dc:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80009e0:	029b      	lsls	r3, r3, #10
 80009e2:	61bb      	str	r3, [r7, #24]
    	if(currentPage > 127) return FLASH_ERROR;
 80009e4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da01      	bge.n	80009f0 <FLASH_Write_Data+0x34>
 80009ec:	2300      	movs	r3, #0
 80009ee:	e04f      	b.n	8000a90 <FLASH_Write_Data+0xd4>
    	if(oldPage != currentPage){
 80009f0:	7ffa      	ldrb	r2, [r7, #31]
 80009f2:	7fbb      	ldrb	r3, [r7, #30]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d004      	beq.n	8000a02 <FLASH_Write_Data+0x46>
    		FLASH_Erase(pageBaseAddress);
 80009f8:	69b8      	ldr	r0, [r7, #24]
 80009fa:	f000 f84f 	bl	8000a9c <FLASH_Erase>
    		oldPage = currentPage;
 80009fe:	7fbb      	ldrb	r3, [r7, #30]
 8000a00:	77fb      	strb	r3, [r7, #31]
    	}

    	uint32_t value = (*pTxBuffer);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	617b      	str	r3, [r7, #20]
        uint16_t lower_half = (uint16_t)(value & 0xFFFF);
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	827b      	strh	r3, [r7, #18]
        uint16_t upper_half = (uint16_t)((value >> 16) & 0xFFFF);
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	0c1b      	lsrs	r3, r3, #16
 8000a10:	823b      	strh	r3, [r7, #16]

        // Clear flags
        FLASH->SR |= (1 << FLASH_SR_EOP) | (1 << FLASH_SR_PGERR) | (1 << FLASH_SR_WRPRTERR);
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	4a20      	ldr	r2, [pc, #128]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a18:	f043 030e 	orr.w	r3, r3, #14
 8000a1c:	60d3      	str	r3, [r2, #12]

        FLASH->CR |= (1 << FLASH_CR_PG); // flash programming mode
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	4a1d      	ldr	r2, [pc, #116]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6113      	str	r3, [r2, #16]
        // Write lower_half
        *(volatile uint16_t *)PageAddress = lower_half;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	8a7a      	ldrh	r2, [r7, #18]
 8000a2e:	801a      	strh	r2, [r3, #0]
        while (FLASH->SR & FLASH_SR_BSY);
 8000a30:	bf00      	nop
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a34:	68db      	ldr	r3, [r3, #12]

        // Write upper_half
        *(volatile uint16_t *)(PageAddress + 2) = upper_half;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3302      	adds	r3, #2
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	8a3b      	ldrh	r3, [r7, #16]
 8000a3e:	8013      	strh	r3, [r2, #0]
        while (FLASH->SR & FLASH_SR_BSY);
 8000a40:	bf00      	nop
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a44:	68db      	ldr	r3, [r3, #12]
        FLASH->CR &= ~(1 << FLASH_CR_PG);
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	6113      	str	r3, [r2, #16]

        if(((FLASH->SR >> FLASH_SR_PGERR) & 1) || (FLASH->SR >> FLASH_SR_WRPRTERR) & 1)
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	085b      	lsrs	r3, r3, #1
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d106      	bne.n	8000a6e <FLASH_Write_Data+0xb2>
 8000a60:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <FLASH_Write_Data+0xdc>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <FLASH_Write_Data+0xb6>
            return FLASH_ERROR;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e00e      	b.n	8000a90 <FLASH_Write_Data+0xd4>

        // step to next address
        pTxBuffer++;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	3304      	adds	r3, #4
 8000a76:	60bb      	str	r3, [r7, #8]
        PageAddress+= 4;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	60fb      	str	r3, [r7, #12]
        length-= 2;
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	3b02      	subs	r3, #2
 8000a82:	80fb      	strh	r3, [r7, #6]
    while(length > 0){
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1a4      	bne.n	80009d4 <FLASH_Write_Data+0x18>
    }

    FLASH_Lock();
 8000a8a:	f7ff ff89 	bl	80009a0 <FLASH_Lock>
    return FLASH_OK;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40022000 	.word	0x40022000

08000a9c <FLASH_Erase>:
        PageAddress += 4;
        length--;
    }
}

void FLASH_Erase(uint32_t PageAdress) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	// choose page erase mode
	FLASH->CR |= (1 << FLASH_CR_PER);
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	6113      	str	r3, [r2, #16]
	// select page address to erase
	FLASH->AR = PageAdress;
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6153      	str	r3, [r2, #20]

	FLASH->CR |= (1 << FLASH_CR_STRT);
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac0:	6113      	str	r3, [r2, #16]

	// wait BSY reset
	while((FLASH->SR >> FLASH_SR_BSY) & 1);
 8000ac2:	bf00      	nop
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f9      	bne.n	8000ac4 <FLASH_Erase+0x28>

	FLASH->CR &= ~(1 << FLASH_CR_PER);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000ad2:	691b      	ldr	r3, [r3, #16]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <FLASH_Erase+0x4c>)
 8000ad6:	f023 0302 	bic.w	r3, r3, #2
 8000ada:	6113      	str	r3, [r2, #16]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <GPIO_PeriClockControl>:
 * @Note              -  none

 */

void GPIO_PeriClockControl(GPIO_TypeDef_t *pGPIOx, uint8_t EnorDi)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d11f      	bne.n	8000b3e <GPIO_PeriClockControl+0x52>
	{
		if (pGPIOx == GPIOA)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a11      	ldr	r2, [pc, #68]	@ (8000b48 <GPIO_PeriClockControl+0x5c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <GPIO_PeriClockControl+0x60>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <GPIO_PeriClockControl+0x60>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6193      	str	r3, [r2, #24]
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
	}
}
 8000b12:	e014      	b.n	8000b3e <GPIO_PeriClockControl+0x52>
		else if (pGPIOx == GPIOB)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <GPIO_PeriClockControl+0x64>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d106      	bne.n	8000b2a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <GPIO_PeriClockControl+0x60>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <GPIO_PeriClockControl+0x60>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
}
 8000b28:	e009      	b.n	8000b3e <GPIO_PeriClockControl+0x52>
		else if (pGPIOx == GPIOC)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <GPIO_PeriClockControl+0x68>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d105      	bne.n	8000b3e <GPIO_PeriClockControl+0x52>
			GPIOC_PCLK_EN();
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <GPIO_PeriClockControl+0x60>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <GPIO_PeriClockControl+0x60>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6193      	str	r3, [r2, #24]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	40011000 	.word	0x40011000

08000b58 <AlternativeMode_Init>:
 * @Note              -  none

 */

void AlternativeMode_Init(GPIO_Handle_t *pGPIOHandle, uint8_t posPinNumber, uint32_t *reg)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	460b      	mov	r3, r1
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	72fb      	strb	r3, [r7, #11]
	// configure the alt functionality
	switch (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	7a5b      	ldrb	r3, [r3, #9]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d851      	bhi.n	8000c12 <AlternativeMode_Init+0xba>
 8000b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b74 <AlternativeMode_Init+0x1c>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000bc3 	.word	0x08000bc3
 8000b7c:	08000bf3 	.word	0x08000bf3
 8000b80:	08000c13 	.word	0x08000c13
	{
	case GPIO_ALT_MODE_OUT_PP:
		// configure the pin as a output
		uint8_t speed = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed == 0 ? 1 : pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	79db      	ldrb	r3, [r3, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <AlternativeMode_Init+0x3a>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	79db      	ldrb	r3, [r3, #7]
 8000b90:	e000      	b.n	8000b94 <AlternativeMode_Init+0x3c>
 8000b92:	2301      	movs	r3, #1
 8000b94:	75fb      	strb	r3, [r7, #23]
		(*reg) |= (speed << (4 * posPinNumber));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	7df9      	ldrb	r1, [r7, #23]
 8000b9c:	7afa      	ldrb	r2, [r7, #11]
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]

		// configure alternative push pull
		(*reg) |= (GPIO_CFG_OUT_AL_PP << (4 * posPinNumber + 2));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7afa      	ldrb	r2, [r7, #11]
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	3202      	adds	r2, #2
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
		break;
 8000bc0:	e028      	b.n	8000c14 <AlternativeMode_Init+0xbc>
	case GPIO_ALT_MODE_OUT_OD:
		// configure the pin as a output
		(*reg) |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * posPinNumber));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	79d2      	ldrb	r2, [r2, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	7afa      	ldrb	r2, [r7, #11]
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]

		// configure alternative open drain
		*reg |= (GPIO_CFG_OUT_GE_OD << (4 * posPinNumber + 2));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	7afa      	ldrb	r2, [r7, #11]
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	3202      	adds	r2, #2
 8000be4:	2101      	movs	r1, #1
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
		break;
 8000bf0:	e010      	b.n	8000c14 <AlternativeMode_Init+0xbc>
	case GPIO_ALT_MODE_IN_FLOATING:
		// configure the pin as a input
		(*reg) |= (GPIO_MODE_IN << (4 * posPinNumber));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]

		// configure input floating
		(*reg) |= (GPIO_CFG_IN_FLOATING << (4 * posPinNumber + 2));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	7afa      	ldrb	r2, [r7, #11]
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	3202      	adds	r2, #2
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	601a      	str	r2, [r3, #0]
		break;
 8000c10:	e000      	b.n	8000c14 <AlternativeMode_Init+0xbc>
	case GPIO_ALT_MODE_IN_PUPD:
		break;
	default:
		break;
 8000c12:	bf00      	nop
	}
}
 8000c14:	bf00      	nop
 8000c16:	371c      	adds	r7, #28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
	uint8_t posPinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	791b      	ldrb	r3, [r3, #4]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	75fb      	strb	r3, [r7, #23]
	uint8_t posReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	08db      	lsrs	r3, r3, #3
 8000c3c:	75bb      	strb	r3, [r7, #22]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2101      	movs	r1, #1
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff51 	bl	8000aec <GPIO_PeriClockControl>

	// 1. configure the mode of gpio pin and speed
	switch (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	795b      	ldrb	r3, [r3, #5]
 8000c4e:	2b07      	cmp	r3, #7
 8000c50:	f000 8124 	beq.w	8000e9c <GPIO_Init+0x27c>
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	f300 815a 	bgt.w	8000f0e <GPIO_Init+0x2ee>
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	dc02      	bgt.n	8000c64 <GPIO_Init+0x44>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	da05      	bge.n	8000c6e <GPIO_Init+0x4e>
 8000c62:	e154      	b.n	8000f0e <GPIO_Init+0x2ee>
 8000c64:	3b04      	subs	r3, #4
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	f200 8151 	bhi.w	8000f0e <GPIO_Init+0x2ee>
 8000c6c:	e048      	b.n	8000d00 <GPIO_Init+0xe0>
	{
	case GPIO_MODE_IN ... GPIO_MODE_OUT:
		// non interrupt
		// configure the speed
		temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * posPinNumber));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	79db      	ldrb	r3, [r3, #7]
 8000c72:	461a      	mov	r2, r3
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
		temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinCfgMode << (4 * posPinNumber + 2));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	799b      	ldrb	r3, [r3, #6]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	7dba      	ldrb	r2, [r7, #22]
 8000ca2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	7dba      	ldrb	r2, [r7, #22]
 8000cba:	4001      	ands	r1, r0
 8000cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber + 2));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	7dba      	ldrb	r2, [r7, #22]
 8000cc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	7dba      	ldrb	r2, [r7, #22]
 8000ce0:	4001      	ands	r1, r0
 8000ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// configure control function (output open drain/push pull, input floating/pull up/pull down)
		pGPIOHandle->pGPIOx->CR[posReg] |= temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	7dba      	ldrb	r2, [r7, #22]
 8000cec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000cf0:	68f9      	ldr	r1, [r7, #12]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	7dba      	ldrb	r2, [r7, #22]
 8000cf8:	4301      	orrs	r1, r0
 8000cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		break;
 8000cfe:	e106      	b.n	8000f0e <GPIO_Init+0x2ee>
	case GPIO_MODE_IT_FT ... GPIO_MODE_IT_RFT:
		// interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	795b      	ldrb	r3, [r3, #5]
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d142      	bne.n	8000d8e <GPIO_Init+0x16e>
		{
			temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinCfgMode << (4 * posPinNumber + 2));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	799b      	ldrb	r3, [r3, #6]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber + 2));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	7dba      	ldrb	r2, [r7, #22]
 8000d26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	7dba      	ldrb	r2, [r7, #22]
 8000d40:	4001      	ands	r1, r0
 8000d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->CR[posReg] |= temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	7dba      	ldrb	r2, [r7, #22]
 8000d4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d50:	68f9      	ldr	r1, [r7, #12]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	7dba      	ldrb	r2, [r7, #22]
 8000d58:	4301      	orrs	r1, r0
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f5c <GPIO_Init+0x33c>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	7912      	ldrb	r2, [r2, #4]
 8000d66:	4611      	mov	r1, r2
 8000d68:	2201      	movs	r2, #1
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f5c <GPIO_Init+0x33c>)
 8000d70:	430b      	orrs	r3, r1
 8000d72:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d74:	4b79      	ldr	r3, [pc, #484]	@ (8000f5c <GPIO_Init+0x33c>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	7912      	ldrb	r2, [r2, #4]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	2201      	movs	r2, #1
 8000d80:	408a      	lsls	r2, r1
 8000d82:	43d2      	mvns	r2, r2
 8000d84:	4611      	mov	r1, r2
 8000d86:	4a75      	ldr	r2, [pc, #468]	@ (8000f5c <GPIO_Init+0x33c>)
 8000d88:	400b      	ands	r3, r1
 8000d8a:	6093      	str	r3, [r2, #8]
 8000d8c:	e035      	b.n	8000dfa <GPIO_Init+0x1da>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	795b      	ldrb	r3, [r3, #5]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d117      	bne.n	8000dc6 <GPIO_Init+0x1a6>
		{
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d96:	4b71      	ldr	r3, [pc, #452]	@ (8000f5c <GPIO_Init+0x33c>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	7912      	ldrb	r2, [r2, #4]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	2201      	movs	r2, #1
 8000da2:	408a      	lsls	r2, r1
 8000da4:	4611      	mov	r1, r2
 8000da6:	4a6d      	ldr	r2, [pc, #436]	@ (8000f5c <GPIO_Init+0x33c>)
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6093      	str	r3, [r2, #8]

			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dac:	4b6b      	ldr	r3, [pc, #428]	@ (8000f5c <GPIO_Init+0x33c>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	7912      	ldrb	r2, [r2, #4]
 8000db4:	4611      	mov	r1, r2
 8000db6:	2201      	movs	r2, #1
 8000db8:	408a      	lsls	r2, r1
 8000dba:	43d2      	mvns	r2, r2
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4a67      	ldr	r2, [pc, #412]	@ (8000f5c <GPIO_Init+0x33c>)
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	60d3      	str	r3, [r2, #12]
 8000dc4:	e019      	b.n	8000dfa <GPIO_Init+0x1da>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d115      	bne.n	8000dfa <GPIO_Init+0x1da>
		{
			// 1. configure FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dce:	4b63      	ldr	r3, [pc, #396]	@ (8000f5c <GPIO_Init+0x33c>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	7912      	ldrb	r2, [r2, #4]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	408a      	lsls	r2, r1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4a5f      	ldr	r2, [pc, #380]	@ (8000f5c <GPIO_Init+0x33c>)
 8000de0:	430b      	orrs	r3, r1
 8000de2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000de4:	4b5d      	ldr	r3, [pc, #372]	@ (8000f5c <GPIO_Init+0x33c>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	7912      	ldrb	r2, [r2, #4]
 8000dec:	4611      	mov	r1, r2
 8000dee:	2201      	movs	r2, #1
 8000df0:	408a      	lsls	r2, r1
 8000df2:	4611      	mov	r1, r2
 8000df4:	4a59      	ldr	r2, [pc, #356]	@ (8000f5c <GPIO_Init+0x33c>)
 8000df6:	430b      	orrs	r3, r1
 8000df8:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in AFIO_EXTTCR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	791b      	ldrb	r3, [r3, #4]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	757b      	strb	r3, [r7, #21]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	791b      	ldrb	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	753b      	strb	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a53      	ldr	r2, [pc, #332]	@ (8000f60 <GPIO_Init+0x340>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d024      	beq.n	8000e60 <GPIO_Init+0x240>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a52      	ldr	r2, [pc, #328]	@ (8000f64 <GPIO_Init+0x344>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d01d      	beq.n	8000e5c <GPIO_Init+0x23c>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a50      	ldr	r2, [pc, #320]	@ (8000f68 <GPIO_Init+0x348>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d016      	beq.n	8000e58 <GPIO_Init+0x238>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a4f      	ldr	r2, [pc, #316]	@ (8000f6c <GPIO_Init+0x34c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00f      	beq.n	8000e54 <GPIO_Init+0x234>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a4d      	ldr	r2, [pc, #308]	@ (8000f70 <GPIO_Init+0x350>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d008      	beq.n	8000e50 <GPIO_Init+0x230>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a4c      	ldr	r2, [pc, #304]	@ (8000f74 <GPIO_Init+0x354>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d101      	bne.n	8000e4c <GPIO_Init+0x22c>
 8000e48:	2305      	movs	r3, #5
 8000e4a:	e00a      	b.n	8000e62 <GPIO_Init+0x242>
 8000e4c:	23ff      	movs	r3, #255	@ 0xff
 8000e4e:	e008      	b.n	8000e62 <GPIO_Init+0x242>
 8000e50:	2304      	movs	r3, #4
 8000e52:	e006      	b.n	8000e62 <GPIO_Init+0x242>
 8000e54:	2303      	movs	r3, #3
 8000e56:	e004      	b.n	8000e62 <GPIO_Init+0x242>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e002      	b.n	8000e62 <GPIO_Init+0x242>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <GPIO_Init+0x242>
 8000e60:	2300      	movs	r3, #0
 8000e62:	74fb      	strb	r3, [r7, #19]

		AFIO_PCLK_EN();
 8000e64:	4b44      	ldr	r3, [pc, #272]	@ (8000f78 <GPIO_Init+0x358>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a43      	ldr	r2, [pc, #268]	@ (8000f78 <GPIO_Init+0x358>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6193      	str	r3, [r2, #24]
		AFIO->EXTTCR[temp1] = (portcode << (temp2 * 4));
 8000e70:	7cfa      	ldrb	r2, [r7, #19]
 8000e72:	7d3b      	ldrb	r3, [r7, #20]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	fa02 f103 	lsl.w	r1, r2, r3
 8000e7a:	4a40      	ldr	r2, [pc, #256]	@ (8000f7c <GPIO_Init+0x35c>)
 8000e7c:	7d7b      	ldrb	r3, [r7, #21]
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e84:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <GPIO_Init+0x33c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	7912      	ldrb	r2, [r2, #4]
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	2201      	movs	r2, #1
 8000e90:	408a      	lsls	r2, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	4a31      	ldr	r2, [pc, #196]	@ (8000f5c <GPIO_Init+0x33c>)
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6013      	str	r3, [r2, #0]
		break;
 8000e9a:	e038      	b.n	8000f0e <GPIO_Init+0x2ee>
	case GPIO_MODE_ALTFN:
		AlternativeMode_Init(pGPIOHandle, posPinNumber, &temp);
 8000e9c:	f107 020c 	add.w	r2, r7, #12
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fe57 	bl	8000b58 <AlternativeMode_Init>

		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	7dba      	ldrb	r2, [r7, #22]
 8000eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	7dba      	ldrb	r2, [r7, #22]
 8000ec8:	4001      	ands	r1, r0
 8000eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber + 2));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	7dba      	ldrb	r2, [r7, #22]
 8000ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	7dba      	ldrb	r2, [r7, #22]
 8000eee:	4001      	ands	r1, r0
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->CR[posReg] |= temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	7dba      	ldrb	r2, [r7, #22]
 8000efa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	7dba      	ldrb	r2, [r7, #22]
 8000f06:	4301      	orrs	r1, r0
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		break;
 8000f0c:	bf00      	nop
	}

	temp = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]

	// configure pull up/pull down
	temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7a1b      	ldrb	r3, [r3, #8]
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

	pGPIOHandle->pGPIOx->ODR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	4619      	mov	r1, r3
 8000f34:	2301      	movs	r3, #1
 8000f36:	408b      	lsls	r3, r1
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	400a      	ands	r2, r1
 8000f42:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68d9      	ldr	r1, [r3, #12]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	60da      	str	r2, [r3, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40010400 	.word	0x40010400
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40011400 	.word	0x40011400
 8000f70:	40011800 	.word	0x40011800
 8000f74:	40012000 	.word	0x40012000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000

08000f80 <GPIO_WritePin>:
	value = (uint16_t)(pGPIOx->IDR);
	return value;
}

void GPIO_WritePin(GPIO_TypeDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET)
 8000f90:	78bb      	ldrb	r3, [r7, #2]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d109      	bne.n	8000faa <GPIO_WritePin+0x2a>
	{
		// write 1 to the output data register at the bit field corressponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]
	else
	{
		// write 0 to the output data register at the bit field corressponding to the pin number
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000fa8:	e009      	b.n	8000fbe <GPIO_WritePin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	43d2      	mvns	r2, r2
 8000fb8:	401a      	ands	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <GPIO_Toggle>:
{
	pGPIOx->ODR = Value;
}

void GPIO_Toggle(GPIO_TypeDef_t *pGPIOx, uint8_t PinNumber)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	405a      	eors	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60da      	str	r2, [r3, #12]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{ // call when IRQ occur
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	// clear
	EXTI->PR |= (1 << PinNumber);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <GPIO_IRQHandling+0x30>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	4611      	mov	r1, r2
 8001008:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <GPIO_IRQHandling+0x30>)
 800100a:	430b      	orrs	r3, r1
 800100c:	6153      	str	r3, [r2, #20]
	GPIO_ExternalInterruptEventsCallback(PinNumber);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f86f 	bl	80010f4 <GPIO_ExternalInterruptEventsCallback>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40010400 	.word	0x40010400

08001024 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ffe1 	bl	8000ff0 <GPIO_IRQHandling>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_1);
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff ffda 	bl	8000ff0 <GPIO_IRQHandling>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_2);
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ffd3 	bl	8000ff0 <GPIO_IRQHandling>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}

0800104e <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_3);
 8001052:	2003      	movs	r0, #3
 8001054:	f7ff ffcc 	bl	8000ff0 <GPIO_IRQHandling>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 8001060:	2004      	movs	r0, #4
 8001062:	f7ff ffc5 	bl	8000ff0 <GPIO_IRQHandling>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	uint8_t pinNumber;
	for (uint8_t i = 5; i < 10; i++)
 8001072:	2305      	movs	r3, #5
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	e00e      	b.n	8001096 <EXTI9_5_IRQHandler+0x2a>
	{
		if ((EXTI->PR >> i) & 1)
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <EXTI9_5_IRQHandler+0x40>)
 800107a:	695a      	ldr	r2, [r3, #20]
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	fa22 f303 	lsr.w	r3, r2, r3
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <EXTI9_5_IRQHandler+0x24>
		{
			pinNumber = i;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	71fb      	strb	r3, [r7, #7]
			break;
 800108e:	e005      	b.n	800109c <EXTI9_5_IRQHandler+0x30>
	for (uint8_t i = 5; i < 10; i++)
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	3301      	adds	r3, #1
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2b09      	cmp	r3, #9
 800109a:	d9ed      	bls.n	8001078 <EXTI9_5_IRQHandler+0xc>
		}
	}

	GPIO_IRQHandling(pinNumber);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffa6 	bl	8000ff0 <GPIO_IRQHandling>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40010400 	.word	0x40010400

080010b0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	uint8_t pinNumber;
	for (uint8_t i = 10; i < 16; i++)
 80010b6:	230a      	movs	r3, #10
 80010b8:	71bb      	strb	r3, [r7, #6]
 80010ba:	e00e      	b.n	80010da <EXTI15_10_IRQHandler+0x2a>
	{
		if ((EXTI->PR >> i) & 1)
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <EXTI15_10_IRQHandler+0x40>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <EXTI15_10_IRQHandler+0x24>
		{
			pinNumber = i;
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	71fb      	strb	r3, [r7, #7]
			break;
 80010d2:	e005      	b.n	80010e0 <EXTI15_10_IRQHandler+0x30>
	for (uint8_t i = 10; i < 16; i++)
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	3301      	adds	r3, #1
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d9ed      	bls.n	80010bc <EXTI15_10_IRQHandler+0xc>
		}
	}

	GPIO_IRQHandling(pinNumber);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff84 	bl	8000ff0 <GPIO_IRQHandling>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010400 	.word	0x40010400

080010f4 <GPIO_ExternalInterruptEventsCallback>:

__weak void GPIO_ExternalInterruptEventsCallback(uint8_t PinNumber) {}
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <RCC_GetSysClockFreq>:

	CLEAR_REG(RCC->CFGR, RCC_CFGR_PPRE2, 0x7);
	SET_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
}

uint32_t RCC_GetSysClockFreq(void) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	uint32_t sysclk_freq = RCC_HSI_FREQ;
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <RCC_GetSysClockFreq+0x1c>)
 8001110:	607b      	str	r3, [r7, #4]

	/* Return 8MHz if sysclk source is HSI or HSE */
	if ((READ_REG(RCC->CFGR, RCC_CFGR_SWS, RCC_CFGR_SWS_MASK) & 0x2) == 0) {
 8001112:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <RCC_GetSysClockFreq+0x20>)
 8001114:	685b      	ldr	r3, [r3, #4]
		return sysclk_freq;
 8001116:	687b      	ldr	r3, [r7, #4]
	if(mul_factor == RCC_PLL_MUL16_2){
		return sysclk_freq * 16U;
	}

	return sysclk_freq * (2 + mul_factor);
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	007a1200 	.word	0x007a1200
 8001128:	40021000 	.word	0x40021000

0800112c <RCC_GetHClockFreq>:

uint32_t RCC_GetHClockFreq(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	uint32_t sys_clk 		= RCC_GetSysClockFreq();
 8001132:	f7ff ffe9 	bl	8001108 <RCC_GetSysClockFreq>
 8001136:	6078      	str	r0, [r7, #4]
	uint8_t	ahb_div_factor	= READ_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_MASK);
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <RCC_GetHClockFreq+0x50>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f023 030f 	bic.w	r3, r3, #15
 8001144:	70fb      	strb	r3, [r7, #3]
	
	switch (ahb_div_factor)
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b0b      	cmp	r3, #11
 800114a:	dc02      	bgt.n	8001152 <RCC_GetHClockFreq+0x26>
 800114c:	2b08      	cmp	r3, #8
 800114e:	da04      	bge.n	800115a <RCC_GetHClockFreq+0x2e>
 8001150:	e00f      	b.n	8001172 <RCC_GetHClockFreq+0x46>
 8001152:	3b0c      	subs	r3, #12
 8001154:	2b03      	cmp	r3, #3
 8001156:	d80c      	bhi.n	8001172 <RCC_GetHClockFreq+0x46>
 8001158:	e005      	b.n	8001166 <RCC_GetHClockFreq+0x3a>
	{
		case RCC_SYSCLK_DIV2 ... RCC_SYSCLK_DIV16:
			return sys_clk >> (ahb_div_factor - RCC_SYSCLK_DIV2 + 1);
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	3b07      	subs	r3, #7
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	e006      	b.n	8001174 <RCC_GetHClockFreq+0x48>
		
		case RCC_SYSCLK_DIV64 ... RCC_SYSCLK_DIV512:
			return sys_clk >> (ahb_div_factor - RCC_SYSCLK_DIV64 + 6);
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	3b06      	subs	r3, #6
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	e000      	b.n	8001174 <RCC_GetHClockFreq+0x48>

		default:
			return sys_clk;
 8001172:	687b      	ldr	r3, [r7, #4]
	}
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000

08001180 <RCC_GetPClock1Freq>:

uint32_t RCC_GetPClock1Freq(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint32_t hclk 			= RCC_GetHClockFreq();
 8001186:	f7ff ffd1 	bl	800112c <RCC_GetHClockFreq>
 800118a:	6078      	str	r0, [r7, #4]
	uint8_t	apb1_div_factor	= READ_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_CFGR_PPRE1_MASK);
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <RCC_GetPClock1Freq+0x34>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2300      	movs	r3, #0
 8001192:	70fb      	strb	r3, [r7, #3]

	switch (apb1_div_factor)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	3b04      	subs	r3, #4
 8001198:	2b03      	cmp	r3, #3
 800119a:	d805      	bhi.n	80011a8 <RCC_GetPClock1Freq+0x28>
	{
		case RCC_HCLK_DIV2 ... RCC_HCLK_DIV16:
			return hclk >> (apb1_div_factor - RCC_HCLK_DIV2 + 1);
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	3b03      	subs	r3, #3
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	e000      	b.n	80011aa <RCC_GetPClock1Freq+0x2a>
		
		default:
			return hclk;
 80011a8:	687b      	ldr	r3, [r7, #4]
	}
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <USART_PeriClockControl>:

/*
 * Peripheral clock setup
 */
void USART_PeriClockControl(USART_TypeDef_t *pUSARTx, uint8_t EnorDi)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
	if (!EnorDi)
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d036      	beq.n	8001238 <USART_PeriClockControl+0x80>
		return;
	if (pUSARTx == USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <USART_PeriClockControl+0x8c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d106      	bne.n	80011e0 <USART_PeriClockControl+0x28>
		USART1_PCLK_EN();
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <USART_PeriClockControl+0x90>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <USART_PeriClockControl+0x90>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	e02c      	b.n	800123a <USART_PeriClockControl+0x82>
	else if (pUSARTx == USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a1a      	ldr	r2, [pc, #104]	@ (800124c <USART_PeriClockControl+0x94>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d106      	bne.n	80011f6 <USART_PeriClockControl+0x3e>
		USART2_PCLK_EN();
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <USART_PeriClockControl+0x90>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <USART_PeriClockControl+0x90>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f2:	61d3      	str	r3, [r2, #28]
 80011f4:	e021      	b.n	800123a <USART_PeriClockControl+0x82>
	else if (pUSARTx == USART3)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a15      	ldr	r2, [pc, #84]	@ (8001250 <USART_PeriClockControl+0x98>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d106      	bne.n	800120c <USART_PeriClockControl+0x54>
		USART3_PCLK_EN();
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <USART_PeriClockControl+0x90>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <USART_PeriClockControl+0x90>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	e016      	b.n	800123a <USART_PeriClockControl+0x82>
	else if (pUSARTx == UART4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <USART_PeriClockControl+0x9c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d106      	bne.n	8001222 <USART_PeriClockControl+0x6a>
		UART4_PCLK_EN();
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <USART_PeriClockControl+0x90>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <USART_PeriClockControl+0x90>)
 800121a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800121e:	61d3      	str	r3, [r2, #28]
 8001220:	e00b      	b.n	800123a <USART_PeriClockControl+0x82>
	else if (pUSARTx == UART5)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <USART_PeriClockControl+0xa0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d107      	bne.n	800123a <USART_PeriClockControl+0x82>
		UART5_PCLK_EN();
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <USART_PeriClockControl+0x90>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <USART_PeriClockControl+0x90>)
 8001230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	e000      	b.n	800123a <USART_PeriClockControl+0x82>
		return;
 8001238:	bf00      	nop
}
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40013800 	.word	0x40013800
 8001248:	40021000 	.word	0x40021000
 800124c:	40004400 	.word	0x40004400
 8001250:	40004800 	.word	0x40004800
 8001254:	40004c00 	.word	0x40004c00
 8001258:	40005000 	.word	0x40005000

0800125c <USART_Start>:

void USART_Start(USART_TypeDef_t *pUSARTx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
	...

0800127c <USART_Init>:
/*
 * Init and De-Init
 */

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	// enable clock for USART
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff94 	bl	80011b8 <USART_PeriClockControl>
	uint32_t reg = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
	// enable USART Tx and Rx engines according to the USART Mode configuration item
	switch (pUSARTHandle->USART_Config.USART_Mode)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d00f      	beq.n	80012bc <USART_Init+0x40>
 800129c:	2b02      	cmp	r3, #2
 800129e:	dc12      	bgt.n	80012c6 <USART_Init+0x4a>
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <USART_Init+0x36>
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10e      	bne.n	80012c6 <USART_Init+0x4a>
	{
	case USART_MODE_ONLY_RX:
		reg |= (1 << USART_CR1_RE);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
		break;
 80012b0:	e009      	b.n	80012c6 <USART_Init+0x4a>
	case USART_MODE_ONLY_TX:
		reg |= (1 << USART_CR1_TE);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	60fb      	str	r3, [r7, #12]
		break;
 80012ba:	e004      	b.n	80012c6 <USART_Init+0x4a>
	case USART_MODE_TXRX:
		reg |= (1 << USART_CR1_TE) | (1 << USART_CR1_RE);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f043 030c 	orr.w	r3, r3, #12
 80012c2:	60fb      	str	r3, [r7, #12]
		break;
 80012c4:	bf00      	nop
	default:
	}
	// configure the word length
	reg |= (pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b5b      	ldrb	r3, [r3, #13]
 80012ca:	031b      	lsls	r3, r3, #12
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
	// configure parity bit
	switch (pUSARTHandle->USART_Config.USART_ParityControl)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7b9b      	ldrb	r3, [r3, #14]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d010      	beq.n	80012fc <USART_Init+0x80>
 80012da:	2b02      	cmp	r3, #2
 80012dc:	dc13      	bgt.n	8001306 <USART_Init+0x8a>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <USART_Init+0x6c>
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d005      	beq.n	80012f2 <USART_Init+0x76>
 80012e6:	e00e      	b.n	8001306 <USART_Init+0x8a>
	{
	case USART_PARITY_DISABLE:
		reg &= ~(1 << USART_CR1_PCE);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80012ee:	60fb      	str	r3, [r7, #12]
		break;
 80012f0:	e009      	b.n	8001306 <USART_Init+0x8a>
	case USART_PARITY_EN_EVEN:
		reg |= (1 << USART_CR1_PCE);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f8:	60fb      	str	r3, [r7, #12]
		break;
 80012fa:	e004      	b.n	8001306 <USART_Init+0x8a>
	case USART_PARITY_EN_ODD:
		reg |= (1 << USART_CR1_PCE) | (1 << USART_CR1_PS);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8001302:	60fb      	str	r3, [r7, #12]
		break;
 8001304:	bf00      	nop
	default:
	}

	pUSARTHandle->pUSARTx->CR1 = reg;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	60da      	str	r2, [r3, #12]

	reg = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
	// configure the number of stop bit
	reg |= (pUSARTHandle->USART_Config.USART_NumberOfStopBits << USART_CR2_STOP);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7b1b      	ldrb	r3, [r3, #12]
 8001316:	031b      	lsls	r3, r3, #12
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]

	pUSARTHandle->pUSARTx->CR2 = reg;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	611a      	str	r2, [r3, #16]

	reg = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]

	// configure hardware flow control
	switch (pUSARTHandle->USART_Config.USART_HWFLowControl)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7bdb      	ldrb	r3, [r3, #15]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d826      	bhi.n	8001380 <USART_Init+0x104>
 8001332:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <USART_Init+0xbc>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001349 	.word	0x08001349
 800133c:	0800135b 	.word	0x0800135b
 8001340:	08001365 	.word	0x08001365
 8001344:	0800136f 	.word	0x0800136f
	{
	case USART_HW_FLOW_CTRL_NONE:
		reg &= ~(1 << USART_CR3_CTSE);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800134e:	60fb      	str	r3, [r7, #12]
		reg &= ~(1 << USART_CR3_RTSE);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001356:	60fb      	str	r3, [r7, #12]
		break;
 8001358:	e012      	b.n	8001380 <USART_Init+0x104>
	case USART_HW_FLOW_CTRL_CTS:
		reg |= (1 << USART_CR3_CTSE);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001360:	60fb      	str	r3, [r7, #12]
		break;
 8001362:	e00d      	b.n	8001380 <USART_Init+0x104>
	case USART_HW_FLOW_CTRL_RTS:
		reg |= (1 << USART_CR3_RTSE);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136a:	60fb      	str	r3, [r7, #12]
		break;
 800136c:	e008      	b.n	8001380 <USART_Init+0x104>
	case USART_HW_FLOW_CTRL_CTS_RTS:
		reg |= (1 << USART_CR3_CTSE);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001374:	60fb      	str	r3, [r7, #12]
		reg |= (1 << USART_CR3_RTSE);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	60fb      	str	r3, [r7, #12]
		break;
 800137e:	bf00      	nop
	default:
	}
	pUSARTHandle->pUSARTx->CR3 = reg;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	615a      	str	r2, [r3, #20]

	// Implement the code to configure the baud rate
	// We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baudrate);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f000 f804 	bl	80013a0 <USART_SetBaudRate>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <USART_SetBaudRate>:

void USART_SetBaudRate(USART_TypeDef_t *pUSARTx, uint32_t BaudRate)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;

	uint32_t usartdiv;

	uint32_t M_part, F_part;
	uint32_t reg = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]

	if(pUSARTx == USART1) PCLKx = RCC_GetPClock1Freq();
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001430 <USART_SetBaudRate+0x90>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d103      	bne.n	80013be <USART_SetBaudRate+0x1e>
 80013b6:	f7ff fee3 	bl	8001180 <RCC_GetPClock1Freq>
 80013ba:	61f8      	str	r0, [r7, #28]
 80013bc:	e002      	b.n	80013c4 <USART_SetBaudRate+0x24>
	else PCLKx = RCC_GetPClock1Freq();
 80013be:	f7ff fedf 	bl	8001180 <RCC_GetPClock1Freq>
 80013c2:	61f8      	str	r0, [r7, #28]

	usartdiv = (25 * PCLKx) / (4 * BaudRate);
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009a      	lsls	r2, r3, #2
 80013ce:	441a      	add	r2, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]

	M_part = usartdiv / 100;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <USART_SetBaudRate+0x94>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	613b      	str	r3, [r7, #16]
	reg |= M_part << 4;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]

	F_part = usartdiv % 100;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <USART_SetBaudRate+0x94>)
 80013f4:	fba2 1203 	umull	r1, r2, r2, r3
 80013f8:	0952      	lsrs	r2, r2, #5
 80013fa:	2164      	movs	r1, #100	@ 0x64
 80013fc:	fb01 f202 	mul.w	r2, r1, r2
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

	F_part = (((F_part * 16) + 50) / 100) & 0x0F;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	3332      	adds	r3, #50	@ 0x32
 800140a:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <USART_SetBaudRate+0x94>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	095b      	lsrs	r3, r3, #5
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	60fb      	str	r3, [r7, #12]

	reg |= F_part;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]

	pUSARTx->BRR = reg;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	609a      	str	r2, [r3, #8]
}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40013800 	.word	0x40013800
 8001434:	51eb851f 	.word	0x51eb851f

08001438 <USART_SendData>:
/*
 * Data send and Receive
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t length)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
	while (length > 0)
 8001444:	e030      	b.n	80014a8 <USART_SendData+0x70>
	{
		// wait until TXE flag is set in the SR
		while (!((pUSARTHandle->pUSARTx->SR >> USART_SR_TXE) & 1))
 8001446:	bf00      	nop
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	09db      	lsrs	r3, r3, #7
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f7      	beq.n	8001448 <USART_SendData+0x10>
			;

		// Check the USART_WordLength
		if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	7b5b      	ldrb	r3, [r3, #13]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d118      	bne.n	8001492 <USART_SendData+0x5a>
		{
			// check for USART_ParityControl
			if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	7b9b      	ldrb	r3, [r3, #14]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10b      	bne.n	8001480 <USART_SendData+0x48>
			{
				pUSARTHandle->pUSARTx->DR = (*((uint16_t *)pTxBuffer) & (uint16_t)0x01FF);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001476:	605a      	str	r2, [r3, #4]
				// 9 bits of user data will be sent
				(uint16_t *)pTxBuffer++;
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3301      	adds	r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	e010      	b.n	80014a2 <USART_SendData+0x6a>
			}
			else
			{
				pUSARTHandle->pUSARTx->DR = (*(pTxBuffer) & (uint8_t)0xFF);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
				// Parity bit is used in this transfer . so 8bits of user data will be sent
				pTxBuffer++;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3301      	adds	r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	e007      	b.n	80014a2 <USART_SendData+0x6a>
			}
		}
		else
		{
			// This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*(pTxBuffer) & (uint8_t)0xFF);
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

			// increment the transmit buffer address by 1
			pTxBuffer++;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3301      	adds	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
		}
		length--;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
	while (length > 0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1cb      	bne.n	8001446 <USART_SendData+0xe>
	}
	// wailt till TC flag is set in the SR
	while (!((pUSARTHandle->pUSARTx->SR >> USART_SR_TC) & 1))
 80014ae:	bf00      	nop
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	099b      	lsrs	r3, r3, #6
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f7      	beq.n	80014b0 <USART_SendData+0x78>
		;
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <USART_ReceiveDataIT>:
	}
	return state;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t length)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
	uint8_t state = pUSARTHandle->RxState;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014de:	75fb      	strb	r3, [r7, #23]
	if (state != USART_BUSY_RX)
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <USART_ReceiveDataIT+0x3e>
	{
		pUSARTHandle->pRxBuffer = pRxBuffer;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxLength = length;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	61da      	str	r2, [r3, #28]

		pUSARTHandle->RxState = USART_BUSY_RX;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	60da      	str	r2, [r3, #12]
	}
	return state;
 800150a:	7dfb      	ldrb	r3, [r7, #23]
}
 800150c:	4618      	mov	r0, r3
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
	...

08001518 <_strtoul_l.isra.0>:
 8001518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800151c:	4686      	mov	lr, r0
 800151e:	460d      	mov	r5, r1
 8001520:	4e33      	ldr	r6, [pc, #204]	@ (80015f0 <_strtoul_l.isra.0+0xd8>)
 8001522:	4628      	mov	r0, r5
 8001524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001528:	5d37      	ldrb	r7, [r6, r4]
 800152a:	f017 0708 	ands.w	r7, r7, #8
 800152e:	d1f8      	bne.n	8001522 <_strtoul_l.isra.0+0xa>
 8001530:	2c2d      	cmp	r4, #45	@ 0x2d
 8001532:	d110      	bne.n	8001556 <_strtoul_l.isra.0+0x3e>
 8001534:	2701      	movs	r7, #1
 8001536:	782c      	ldrb	r4, [r5, #0]
 8001538:	1c85      	adds	r5, r0, #2
 800153a:	f033 0010 	bics.w	r0, r3, #16
 800153e:	d115      	bne.n	800156c <_strtoul_l.isra.0+0x54>
 8001540:	2c30      	cmp	r4, #48	@ 0x30
 8001542:	d10d      	bne.n	8001560 <_strtoul_l.isra.0+0x48>
 8001544:	7828      	ldrb	r0, [r5, #0]
 8001546:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800154a:	2858      	cmp	r0, #88	@ 0x58
 800154c:	d108      	bne.n	8001560 <_strtoul_l.isra.0+0x48>
 800154e:	786c      	ldrb	r4, [r5, #1]
 8001550:	3502      	adds	r5, #2
 8001552:	2310      	movs	r3, #16
 8001554:	e00a      	b.n	800156c <_strtoul_l.isra.0+0x54>
 8001556:	2c2b      	cmp	r4, #43	@ 0x2b
 8001558:	bf04      	itt	eq
 800155a:	782c      	ldrbeq	r4, [r5, #0]
 800155c:	1c85      	addeq	r5, r0, #2
 800155e:	e7ec      	b.n	800153a <_strtoul_l.isra.0+0x22>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f6      	bne.n	8001552 <_strtoul_l.isra.0+0x3a>
 8001564:	2c30      	cmp	r4, #48	@ 0x30
 8001566:	bf14      	ite	ne
 8001568:	230a      	movne	r3, #10
 800156a:	2308      	moveq	r3, #8
 800156c:	f04f 38ff 	mov.w	r8, #4294967295
 8001570:	fbb8 f8f3 	udiv	r8, r8, r3
 8001574:	2600      	movs	r6, #0
 8001576:	fb03 f908 	mul.w	r9, r3, r8
 800157a:	4630      	mov	r0, r6
 800157c:	ea6f 0909 	mvn.w	r9, r9
 8001580:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8001584:	f1bc 0f09 	cmp.w	ip, #9
 8001588:	d810      	bhi.n	80015ac <_strtoul_l.isra.0+0x94>
 800158a:	4664      	mov	r4, ip
 800158c:	42a3      	cmp	r3, r4
 800158e:	dd1e      	ble.n	80015ce <_strtoul_l.isra.0+0xb6>
 8001590:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001594:	d007      	beq.n	80015a6 <_strtoul_l.isra.0+0x8e>
 8001596:	4580      	cmp	r8, r0
 8001598:	d316      	bcc.n	80015c8 <_strtoul_l.isra.0+0xb0>
 800159a:	d101      	bne.n	80015a0 <_strtoul_l.isra.0+0x88>
 800159c:	45a1      	cmp	r9, r4
 800159e:	db13      	blt.n	80015c8 <_strtoul_l.isra.0+0xb0>
 80015a0:	2601      	movs	r6, #1
 80015a2:	fb00 4003 	mla	r0, r0, r3, r4
 80015a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80015aa:	e7e9      	b.n	8001580 <_strtoul_l.isra.0+0x68>
 80015ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80015b0:	f1bc 0f19 	cmp.w	ip, #25
 80015b4:	d801      	bhi.n	80015ba <_strtoul_l.isra.0+0xa2>
 80015b6:	3c37      	subs	r4, #55	@ 0x37
 80015b8:	e7e8      	b.n	800158c <_strtoul_l.isra.0+0x74>
 80015ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80015be:	f1bc 0f19 	cmp.w	ip, #25
 80015c2:	d804      	bhi.n	80015ce <_strtoul_l.isra.0+0xb6>
 80015c4:	3c57      	subs	r4, #87	@ 0x57
 80015c6:	e7e1      	b.n	800158c <_strtoul_l.isra.0+0x74>
 80015c8:	f04f 36ff 	mov.w	r6, #4294967295
 80015cc:	e7eb      	b.n	80015a6 <_strtoul_l.isra.0+0x8e>
 80015ce:	1c73      	adds	r3, r6, #1
 80015d0:	d106      	bne.n	80015e0 <_strtoul_l.isra.0+0xc8>
 80015d2:	2322      	movs	r3, #34	@ 0x22
 80015d4:	4630      	mov	r0, r6
 80015d6:	f8ce 3000 	str.w	r3, [lr]
 80015da:	b932      	cbnz	r2, 80015ea <_strtoul_l.isra.0+0xd2>
 80015dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015e0:	b107      	cbz	r7, 80015e4 <_strtoul_l.isra.0+0xcc>
 80015e2:	4240      	negs	r0, r0
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d0f9      	beq.n	80015dc <_strtoul_l.isra.0+0xc4>
 80015e8:	b106      	cbz	r6, 80015ec <_strtoul_l.isra.0+0xd4>
 80015ea:	1e69      	subs	r1, r5, #1
 80015ec:	6011      	str	r1, [r2, #0]
 80015ee:	e7f5      	b.n	80015dc <_strtoul_l.isra.0+0xc4>
 80015f0:	08001727 	.word	0x08001727

080015f4 <strtoul>:
 80015f4:	4613      	mov	r3, r2
 80015f6:	460a      	mov	r2, r1
 80015f8:	4601      	mov	r1, r0
 80015fa:	4802      	ldr	r0, [pc, #8]	@ (8001604 <strtoul+0x10>)
 80015fc:	6800      	ldr	r0, [r0, #0]
 80015fe:	f7ff bf8b 	b.w	8001518 <_strtoul_l.isra.0>
 8001602:	bf00      	nop
 8001604:	20000004 	.word	0x20000004

08001608 <strncmp>:
 8001608:	b510      	push	{r4, lr}
 800160a:	b16a      	cbz	r2, 8001628 <strncmp+0x20>
 800160c:	3901      	subs	r1, #1
 800160e:	1884      	adds	r4, r0, r2
 8001610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001614:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001618:	429a      	cmp	r2, r3
 800161a:	d103      	bne.n	8001624 <strncmp+0x1c>
 800161c:	42a0      	cmp	r0, r4
 800161e:	d001      	beq.n	8001624 <strncmp+0x1c>
 8001620:	2a00      	cmp	r2, #0
 8001622:	d1f5      	bne.n	8001610 <strncmp+0x8>
 8001624:	1ad0      	subs	r0, r2, r3
 8001626:	bd10      	pop	{r4, pc}
 8001628:	4610      	mov	r0, r2
 800162a:	e7fc      	b.n	8001626 <strncmp+0x1e>

0800162c <__libc_init_array>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	2600      	movs	r6, #0
 8001630:	4d0c      	ldr	r5, [pc, #48]	@ (8001664 <__libc_init_array+0x38>)
 8001632:	4c0d      	ldr	r4, [pc, #52]	@ (8001668 <__libc_init_array+0x3c>)
 8001634:	1b64      	subs	r4, r4, r5
 8001636:	10a4      	asrs	r4, r4, #2
 8001638:	42a6      	cmp	r6, r4
 800163a:	d109      	bne.n	8001650 <__libc_init_array+0x24>
 800163c:	f000 f828 	bl	8001690 <_init>
 8001640:	2600      	movs	r6, #0
 8001642:	4d0a      	ldr	r5, [pc, #40]	@ (800166c <__libc_init_array+0x40>)
 8001644:	4c0a      	ldr	r4, [pc, #40]	@ (8001670 <__libc_init_array+0x44>)
 8001646:	1b64      	subs	r4, r4, r5
 8001648:	10a4      	asrs	r4, r4, #2
 800164a:	42a6      	cmp	r6, r4
 800164c:	d105      	bne.n	800165a <__libc_init_array+0x2e>
 800164e:	bd70      	pop	{r4, r5, r6, pc}
 8001650:	f855 3b04 	ldr.w	r3, [r5], #4
 8001654:	4798      	blx	r3
 8001656:	3601      	adds	r6, #1
 8001658:	e7ee      	b.n	8001638 <__libc_init_array+0xc>
 800165a:	f855 3b04 	ldr.w	r3, [r5], #4
 800165e:	4798      	blx	r3
 8001660:	3601      	adds	r6, #1
 8001662:	e7f2      	b.n	800164a <__libc_init_array+0x1e>
 8001664:	08001830 	.word	0x08001830
 8001668:	08001830 	.word	0x08001830
 800166c:	08001830 	.word	0x08001830
 8001670:	08001834 	.word	0x08001834

08001674 <memcpy>:
 8001674:	440a      	add	r2, r1
 8001676:	4291      	cmp	r1, r2
 8001678:	f100 33ff 	add.w	r3, r0, #4294967295
 800167c:	d100      	bne.n	8001680 <memcpy+0xc>
 800167e:	4770      	bx	lr
 8001680:	b510      	push	{r4, lr}
 8001682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001686:	4291      	cmp	r1, r2
 8001688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800168c:	d1f9      	bne.n	8001682 <memcpy+0xe>
 800168e:	bd10      	pop	{r4, pc}

08001690 <_init>:
 8001690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001692:	bf00      	nop
 8001694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001696:	bc08      	pop	{r3}
 8001698:	469e      	mov	lr, r3
 800169a:	4770      	bx	lr

0800169c <_fini>:
 800169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169e:	bf00      	nop
 80016a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a2:	bc08      	pop	{r3}
 80016a4:	469e      	mov	lr, r3
 80016a6:	4770      	bx	lr
