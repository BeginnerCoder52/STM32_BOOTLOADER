
BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c20  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000d50  08000d50  00001d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d84  08000d84  00002024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000d84  08000d84  00001d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d8c  08000d8c  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d8c  08000d8c  00001d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d90  08000d90  00001d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08000d94  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000024  08000db8  00002024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000db8  00002040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002445  00000000  00000000  0000204d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000933  00000000  00000000  00004492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  00004dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000216  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003058  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e61  00000000  00000000  0000830e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bc5b  00000000  00000000  0000b16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00016dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000aa4  00000000  00000000  00016e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000178b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d38 	.word	0x08000d38

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08000d38 	.word	0x08000d38

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <main>:
static void uart_send_string(char *str);
static void led_init(void);
static void led_toggle(void);

int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
    // ==== Init LED on PC13 ====
    led_init();
 8000186:	f000 f85d 	bl	8000244 <led_init>

    // ==== Init USART1 pins and peripheral ====
    GPIO_Handle_t hgpio;

    // TX (PA9)
    hgpio.pGPIOx = GPIOA;
 800018a:	4b28      	ldr	r3, [pc, #160]	@ (800022c <main+0xac>)
 800018c:	607b      	str	r3, [r7, #4]
    hgpio.GPIO_PinConfig.GPIO_PinNumber      = GPIO_PIN_NO_9;
 800018e:	2309      	movs	r3, #9
 8000190:	723b      	strb	r3, [r7, #8]
    hgpio.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000192:	2307      	movs	r3, #7
 8000194:	727b      	strb	r3, [r7, #9]
    hgpio.GPIO_PinConfig.GPIO_PinAltFunMode  = GPIO_ALT_MODE_USART_TX_FULLDUP;
 8000196:	2300      	movs	r3, #0
 8000198:	737b      	strb	r3, [r7, #13]
    hgpio.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_SPEED_FAST;
 800019a:	2303      	movs	r3, #3
 800019c:	72fb      	strb	r3, [r7, #11]
    hgpio.GPIO_PinConfig.GPIO_PinPuPdControl = 0;
 800019e:	2300      	movs	r3, #0
 80001a0:	733b      	strb	r3, [r7, #12]
    GPIO_Init(&hgpio);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 f94d 	bl	8000444 <GPIO_Init>

    // RX (PA10)
    hgpio.pGPIOx = GPIOA;
 80001aa:	4b20      	ldr	r3, [pc, #128]	@ (800022c <main+0xac>)
 80001ac:	607b      	str	r3, [r7, #4]
    hgpio.GPIO_PinConfig.GPIO_PinNumber      = GPIO_PIN_NO_10;
 80001ae:	230a      	movs	r3, #10
 80001b0:	723b      	strb	r3, [r7, #8]
    hgpio.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80001b2:	2307      	movs	r3, #7
 80001b4:	727b      	strb	r3, [r7, #9]
    hgpio.GPIO_PinConfig.GPIO_PinAltFunMode  = GPIO_ALT_MODE_USART_RX_FULLDUP;
 80001b6:	2302      	movs	r3, #2
 80001b8:	737b      	strb	r3, [r7, #13]
    hgpio.GPIO_PinConfig.GPIO_PinSpeed       = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	72fb      	strb	r3, [r7, #11]
    hgpio.GPIO_PinConfig.GPIO_PinPuPdControl = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	733b      	strb	r3, [r7, #12]
    GPIO_Init(&hgpio);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 f93d 	bl	8000444 <GPIO_Init>

    // USART1 setup
    husart1.pUSARTx = USART1;
 80001ca:	4b19      	ldr	r3, [pc, #100]	@ (8000230 <main+0xb0>)
 80001cc:	4a19      	ldr	r2, [pc, #100]	@ (8000234 <main+0xb4>)
 80001ce:	601a      	str	r2, [r3, #0]
    husart1.USART_Config.USART_Mode             = USART_MODE_TXRX;
 80001d0:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <main+0xb0>)
 80001d2:	2202      	movs	r2, #2
 80001d4:	711a      	strb	r2, [r3, #4]
    husart1.USART_Config.USART_Baudrate         = USART_STD_BAUD_115200;
 80001d6:	4b16      	ldr	r3, [pc, #88]	@ (8000230 <main+0xb0>)
 80001d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001dc:	609a      	str	r2, [r3, #8]
    husart1.USART_Config.USART_NumberOfStopBits = USART_STOPBITS_1;
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <main+0xb0>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	731a      	strb	r2, [r3, #12]
    husart1.USART_Config.USART_WordLength       = USART_WORDLEN_8BITS;
 80001e4:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <main+0xb0>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	735a      	strb	r2, [r3, #13]
    husart1.USART_Config.USART_ParityControl    = USART_PARITY_DISABLE;
 80001ea:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <main+0xb0>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	739a      	strb	r2, [r3, #14]
    husart1.USART_Config.USART_HWFLowControl    = USART_HW_FLOW_CTRL_NONE;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <main+0xb0>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	73da      	strb	r2, [r3, #15]

    USART_Init(&husart1);
 80001f6:	480e      	ldr	r0, [pc, #56]	@ (8000230 <main+0xb0>)
 80001f8:	f000 fc52 	bl	8000aa0 <USART_Init>
    USART_Start(husart1.pUSARTx);
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <main+0xb0>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fc3d 	bl	8000a80 <USART_Start>

    uart_send_string("BOOTLOADER: started\r\n");
 8000206:	480c      	ldr	r0, [pc, #48]	@ (8000238 <main+0xb8>)
 8000208:	f000 f844 	bl	8000294 <uart_send_string>

    while (1)
    {
        // Toggle LED at ~2â€¯Hz
        led_toggle();
 800020c:	f000 f838 	bl	8000280 <led_toggle>

        // Send periodic status
        uart_send_string("BOOTLOADER: still alive\r\n");
 8000210:	480a      	ldr	r0, [pc, #40]	@ (800023c <main+0xbc>)
 8000212:	f000 f83f 	bl	8000294 <uart_send_string>

        // crude delay ~250ms
        for (volatile uint32_t i = 0; i < 500000; i++);
 8000216:	2300      	movs	r3, #0
 8000218:	603b      	str	r3, [r7, #0]
 800021a:	e002      	b.n	8000222 <main+0xa2>
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	3301      	adds	r3, #1
 8000220:	603b      	str	r3, [r7, #0]
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	4a06      	ldr	r2, [pc, #24]	@ (8000240 <main+0xc0>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d9f8      	bls.n	800021c <main+0x9c>
        led_toggle();
 800022a:	e7ef      	b.n	800020c <main+0x8c>
 800022c:	40010800 	.word	0x40010800
 8000230:	20000000 	.word	0x20000000
 8000234:	40013800 	.word	0x40013800
 8000238:	08000d50 	.word	0x08000d50
 800023c:	08000d68 	.word	0x08000d68
 8000240:	0007a11f 	.word	0x0007a11f

08000244 <led_init>:
    }
}

static void led_init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
    GPIO_Handle_t led;
    led.pGPIOx = GPIOC;
 800024a:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <led_init+0x38>)
 800024c:	607b      	str	r3, [r7, #4]
    led.GPIO_PinConfig.GPIO_PinNumber      = GPIO_PIN_NO_13;
 800024e:	230d      	movs	r3, #13
 8000250:	723b      	strb	r3, [r7, #8]
    led.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8000252:	2301      	movs	r3, #1
 8000254:	727b      	strb	r3, [r7, #9]
    led.GPIO_PinConfig.GPIO_PinCfgMode     = GPIO_CFG_OUT_GE_PP; // General purpose push-pull
 8000256:	2300      	movs	r3, #0
 8000258:	72bb      	strb	r3, [r7, #10]
    led.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_SPEED_MEDIUM;  // 2 MHz is plenty for LED
 800025a:	2302      	movs	r3, #2
 800025c:	72fb      	strb	r3, [r7, #11]
    led.GPIO_PinConfig.GPIO_PinPuPdControl = 0;                  // no pull
 800025e:	2300      	movs	r3, #0
 8000260:	733b      	strb	r3, [r7, #12]
    GPIO_Init(&led);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f8ed 	bl	8000444 <GPIO_Init>

    // PC13 is often active low â€” set high to turn OFF initially
    GPIO_WritePin(GPIOC, GPIO_PIN_NO_13, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	210d      	movs	r1, #13
 800026e:	4803      	ldr	r0, [pc, #12]	@ (800027c <led_init+0x38>)
 8000270:	f000 fa98 	bl	80007a4 <GPIO_WritePin>
}
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40011000 	.word	0x40011000

08000280 <led_toggle>:

static void led_toggle(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    GPIO_Toggle(GPIOC, GPIO_PIN_NO_13);
 8000284:	210d      	movs	r1, #13
 8000286:	4802      	ldr	r0, [pc, #8]	@ (8000290 <led_toggle+0x10>)
 8000288:	f000 fab0 	bl	80007ec <GPIO_Toggle>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40011000 	.word	0x40011000

08000294 <uart_send_string>:

static void uart_send_string(char *str)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    USART_SendData(&husart1, (uint8_t *)str, strlen(str));
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ff67 	bl	8000170 <strlen>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	6879      	ldr	r1, [r7, #4]
 80002a8:	4803      	ldr	r0, [pc, #12]	@ (80002b8 <uart_send_string+0x24>)
 80002aa:	f000 fcd7 	bl	8000c5c <USART_SendData>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000000 	.word	0x20000000

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	@ (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	@ (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	@ (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 fd01 	bl	8000cf0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002ee:	f7ff ff47 	bl	8000180 <main>

080002f2 <LoopForever>:

LoopForever:
  b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000300:	08000d94 	.word	0x08000d94
  ldr r2, =_sbss
 8000304:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000308:	20000040 	.word	0x20000040

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <GPIO_PeriClockControl>:
 * @Note              -  none

 */

void GPIO_PeriClockControl(GPIO_TypeDef_t *pGPIOx, uint8_t EnorDi)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d11f      	bne.n	8000362 <GPIO_PeriClockControl+0x52>
	{
		if (pGPIOx == GPIOA)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a11      	ldr	r2, [pc, #68]	@ (800036c <GPIO_PeriClockControl+0x5c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800032a:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <GPIO_PeriClockControl+0x60>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a10      	ldr	r2, [pc, #64]	@ (8000370 <GPIO_PeriClockControl+0x60>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6193      	str	r3, [r2, #24]
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
	}
}
 8000336:	e014      	b.n	8000362 <GPIO_PeriClockControl+0x52>
		else if (pGPIOx == GPIOB)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <GPIO_PeriClockControl+0x64>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000340:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <GPIO_PeriClockControl+0x60>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <GPIO_PeriClockControl+0x60>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
}
 800034c:	e009      	b.n	8000362 <GPIO_PeriClockControl+0x52>
		else if (pGPIOx == GPIOC)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a09      	ldr	r2, [pc, #36]	@ (8000378 <GPIO_PeriClockControl+0x68>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d105      	bne.n	8000362 <GPIO_PeriClockControl+0x52>
			GPIOC_PCLK_EN();
 8000356:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <GPIO_PeriClockControl+0x60>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a05      	ldr	r2, [pc, #20]	@ (8000370 <GPIO_PeriClockControl+0x60>)
 800035c:	f043 0310 	orr.w	r3, r3, #16
 8000360:	6193      	str	r3, [r2, #24]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40010800 	.word	0x40010800
 8000370:	40021000 	.word	0x40021000
 8000374:	40010c00 	.word	0x40010c00
 8000378:	40011000 	.word	0x40011000

0800037c <AlternativeMode_Init>:
 * @Note              -  none

 */

void AlternativeMode_Init(GPIO_Handle_t *pGPIOHandle, uint8_t posPinNumber, uint32_t *reg)
{
 800037c:	b480      	push	{r7}
 800037e:	b087      	sub	sp, #28
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	460b      	mov	r3, r1
 8000386:	607a      	str	r2, [r7, #4]
 8000388:	72fb      	strb	r3, [r7, #11]
	// configure the alt functionality
	switch (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	7a5b      	ldrb	r3, [r3, #9]
 800038e:	2b03      	cmp	r3, #3
 8000390:	d851      	bhi.n	8000436 <AlternativeMode_Init+0xba>
 8000392:	a201      	add	r2, pc, #4	@ (adr r2, 8000398 <AlternativeMode_Init+0x1c>)
 8000394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000398:	080003a9 	.word	0x080003a9
 800039c:	080003e7 	.word	0x080003e7
 80003a0:	08000417 	.word	0x08000417
 80003a4:	08000437 	.word	0x08000437
	{
	case GPIO_ALT_MODE_OUT_PP:
		// configure the pin as a output
		uint8_t speed = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed == 0 ? 1 : pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	79db      	ldrb	r3, [r3, #7]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <AlternativeMode_Init+0x3a>
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	79db      	ldrb	r3, [r3, #7]
 80003b4:	e000      	b.n	80003b8 <AlternativeMode_Init+0x3c>
 80003b6:	2301      	movs	r3, #1
 80003b8:	75fb      	strb	r3, [r7, #23]
		(*reg) |= (speed << (4 * posPinNumber));
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	7df9      	ldrb	r1, [r7, #23]
 80003c0:	7afa      	ldrb	r2, [r7, #11]
 80003c2:	0092      	lsls	r2, r2, #2
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	431a      	orrs	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]

		// configure alternative push pull
		(*reg) |= (GPIO_CFG_OUT_AL_PP << (4 * posPinNumber + 2));
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	7afa      	ldrb	r2, [r7, #11]
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	3202      	adds	r2, #2
 80003d8:	2102      	movs	r1, #2
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	431a      	orrs	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	601a      	str	r2, [r3, #0]
		break;
 80003e4:	e028      	b.n	8000438 <AlternativeMode_Init+0xbc>
	case GPIO_ALT_MODE_OUT_OD:
		// configure the pin as a output
		(*reg) |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * posPinNumber));
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	79d2      	ldrb	r2, [r2, #7]
 80003ee:	4611      	mov	r1, r2
 80003f0:	7afa      	ldrb	r2, [r7, #11]
 80003f2:	0092      	lsls	r2, r2, #2
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	431a      	orrs	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]

		// configure alternative open drain
		*reg |= (GPIO_CFG_OUT_GE_OD << (4 * posPinNumber + 2));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	7afa      	ldrb	r2, [r7, #11]
 8000404:	0092      	lsls	r2, r2, #2
 8000406:	3202      	adds	r2, #2
 8000408:	2101      	movs	r1, #1
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	431a      	orrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
		break;
 8000414:	e010      	b.n	8000438 <AlternativeMode_Init+0xbc>
	case GPIO_ALT_MODE_IN_FLOATING:
		// configure the pin as a input
		(*reg) |= (GPIO_MODE_IN << (4 * posPinNumber));
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]

		// configure input floating
		(*reg) |= (GPIO_CFG_IN_FLOATING << (4 * posPinNumber + 2));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	7afa      	ldrb	r2, [r7, #11]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	3202      	adds	r2, #2
 8000428:	2101      	movs	r1, #1
 800042a:	fa01 f202 	lsl.w	r2, r1, r2
 800042e:	431a      	orrs	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	601a      	str	r2, [r3, #0]
		break;
 8000434:	e000      	b.n	8000438 <AlternativeMode_Init+0xbc>
	case GPIO_ALT_MODE_IN_PUPD:
		break;
	default:
		break;
 8000436:	bf00      	nop
	}
}
 8000438:	bf00      	nop
 800043a:	371c      	adds	r7, #28
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop

08000444 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
	uint8_t posPinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	791b      	ldrb	r3, [r3, #4]
 8000454:	f003 0307 	and.w	r3, r3, #7
 8000458:	75fb      	strb	r3, [r7, #23]
	uint8_t posReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	75bb      	strb	r3, [r7, #22]

	// enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2101      	movs	r1, #1
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff51 	bl	8000310 <GPIO_PeriClockControl>

	// 1. configure the mode of gpio pin and speed
	switch (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	795b      	ldrb	r3, [r3, #5]
 8000472:	2b07      	cmp	r3, #7
 8000474:	f000 8124 	beq.w	80006c0 <GPIO_Init+0x27c>
 8000478:	2b07      	cmp	r3, #7
 800047a:	f300 815a 	bgt.w	8000732 <GPIO_Init+0x2ee>
 800047e:	2b01      	cmp	r3, #1
 8000480:	dc02      	bgt.n	8000488 <GPIO_Init+0x44>
 8000482:	2b00      	cmp	r3, #0
 8000484:	da05      	bge.n	8000492 <GPIO_Init+0x4e>
 8000486:	e154      	b.n	8000732 <GPIO_Init+0x2ee>
 8000488:	3b04      	subs	r3, #4
 800048a:	2b02      	cmp	r3, #2
 800048c:	f200 8151 	bhi.w	8000732 <GPIO_Init+0x2ee>
 8000490:	e048      	b.n	8000524 <GPIO_Init+0xe0>
	{
	case GPIO_MODE_IN ... GPIO_MODE_OUT:
		// non interrupt
		// configure the speed
		temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * posPinNumber));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	79db      	ldrb	r3, [r3, #7]
 8000496:	461a      	mov	r2, r3
 8000498:	7dfb      	ldrb	r3, [r7, #23]
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
		temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinCfgMode << (4 * posPinNumber + 2));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	799b      	ldrb	r3, [r3, #6]
 80004ac:	461a      	mov	r2, r3
 80004ae:	7dfb      	ldrb	r3, [r7, #23]
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	3302      	adds	r3, #2
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	4313      	orrs	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	7dba      	ldrb	r2, [r7, #22]
 80004c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004ca:	7dfb      	ldrb	r3, [r7, #23]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	2203      	movs	r2, #3
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	7dba      	ldrb	r2, [r7, #22]
 80004de:	4001      	ands	r1, r0
 80004e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber + 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	7dba      	ldrb	r2, [r7, #22]
 80004ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004ee:	7dfb      	ldrb	r3, [r7, #23]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	3302      	adds	r3, #2
 80004f4:	2203      	movs	r2, #3
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	7dba      	ldrb	r2, [r7, #22]
 8000504:	4001      	ands	r1, r0
 8000506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// configure control function (output open drain/push pull, input floating/pull up/pull down)
		pGPIOHandle->pGPIOx->CR[posReg] |= temp;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	7dba      	ldrb	r2, [r7, #22]
 8000510:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000514:	68f9      	ldr	r1, [r7, #12]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	7dba      	ldrb	r2, [r7, #22]
 800051c:	4301      	orrs	r1, r0
 800051e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		break;
 8000522:	e106      	b.n	8000732 <GPIO_Init+0x2ee>
	case GPIO_MODE_IT_FT ... GPIO_MODE_IT_RFT:
		// interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	2b04      	cmp	r3, #4
 800052a:	d142      	bne.n	80005b2 <GPIO_Init+0x16e>
		{
			temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinCfgMode << (4 * posPinNumber + 2));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	799b      	ldrb	r3, [r3, #6]
 8000530:	461a      	mov	r2, r3
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	3302      	adds	r3, #2
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	461a      	mov	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4313      	orrs	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber + 2));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	7dba      	ldrb	r2, [r7, #22]
 800054a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800054e:	7dfb      	ldrb	r3, [r7, #23]
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	3302      	adds	r3, #2
 8000554:	2203      	movs	r2, #3
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	4618      	mov	r0, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	7dba      	ldrb	r2, [r7, #22]
 8000564:	4001      	ands	r1, r0
 8000566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->CR[posReg] |= temp;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	7dba      	ldrb	r2, [r7, #22]
 8000570:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000574:	68f9      	ldr	r1, [r7, #12]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	7dba      	ldrb	r2, [r7, #22]
 800057c:	4301      	orrs	r1, r0
 800057e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			// 1. configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b7f      	ldr	r3, [pc, #508]	@ (8000780 <GPIO_Init+0x33c>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	4611      	mov	r1, r2
 8000592:	4a7b      	ldr	r2, [pc, #492]	@ (8000780 <GPIO_Init+0x33c>)
 8000594:	430b      	orrs	r3, r1
 8000596:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000598:	4b79      	ldr	r3, [pc, #484]	@ (8000780 <GPIO_Init+0x33c>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a75      	ldr	r2, [pc, #468]	@ (8000780 <GPIO_Init+0x33c>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	6093      	str	r3, [r2, #8]
 80005b0:	e035      	b.n	800061e <GPIO_Init+0x1da>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	795b      	ldrb	r3, [r3, #5]
 80005b6:	2b05      	cmp	r3, #5
 80005b8:	d117      	bne.n	80005ea <GPIO_Init+0x1a6>
		{
			// 1. configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b71      	ldr	r3, [pc, #452]	@ (8000780 <GPIO_Init+0x33c>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a6d      	ldr	r2, [pc, #436]	@ (8000780 <GPIO_Init+0x33c>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6093      	str	r3, [r2, #8]

			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000780 <GPIO_Init+0x33c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	43d2      	mvns	r2, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a67      	ldr	r2, [pc, #412]	@ (8000780 <GPIO_Init+0x33c>)
 80005e4:	400b      	ands	r3, r1
 80005e6:	60d3      	str	r3, [r2, #12]
 80005e8:	e019      	b.n	800061e <GPIO_Init+0x1da>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	795b      	ldrb	r3, [r3, #5]
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d115      	bne.n	800061e <GPIO_Init+0x1da>
		{
			// 1. configure FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	4b63      	ldr	r3, [pc, #396]	@ (8000780 <GPIO_Init+0x33c>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	7912      	ldrb	r2, [r2, #4]
 80005fa:	4611      	mov	r1, r2
 80005fc:	2201      	movs	r2, #1
 80005fe:	408a      	lsls	r2, r1
 8000600:	4611      	mov	r1, r2
 8000602:	4a5f      	ldr	r2, [pc, #380]	@ (8000780 <GPIO_Init+0x33c>)
 8000604:	430b      	orrs	r3, r1
 8000606:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000608:	4b5d      	ldr	r3, [pc, #372]	@ (8000780 <GPIO_Init+0x33c>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7912      	ldrb	r2, [r2, #4]
 8000610:	4611      	mov	r1, r2
 8000612:	2201      	movs	r2, #1
 8000614:	408a      	lsls	r2, r1
 8000616:	4611      	mov	r1, r2
 8000618:	4a59      	ldr	r2, [pc, #356]	@ (8000780 <GPIO_Init+0x33c>)
 800061a:	430b      	orrs	r3, r1
 800061c:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in AFIO_EXTTCR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	757b      	strb	r3, [r7, #21]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	f003 0303 	and.w	r3, r3, #3
 800062e:	753b      	strb	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a53      	ldr	r2, [pc, #332]	@ (8000784 <GPIO_Init+0x340>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d024      	beq.n	8000684 <GPIO_Init+0x240>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a52      	ldr	r2, [pc, #328]	@ (8000788 <GPIO_Init+0x344>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d01d      	beq.n	8000680 <GPIO_Init+0x23c>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a50      	ldr	r2, [pc, #320]	@ (800078c <GPIO_Init+0x348>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d016      	beq.n	800067c <GPIO_Init+0x238>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a4f      	ldr	r2, [pc, #316]	@ (8000790 <GPIO_Init+0x34c>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d00f      	beq.n	8000678 <GPIO_Init+0x234>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a4d      	ldr	r2, [pc, #308]	@ (8000794 <GPIO_Init+0x350>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d008      	beq.n	8000674 <GPIO_Init+0x230>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a4c      	ldr	r2, [pc, #304]	@ (8000798 <GPIO_Init+0x354>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d101      	bne.n	8000670 <GPIO_Init+0x22c>
 800066c:	2305      	movs	r3, #5
 800066e:	e00a      	b.n	8000686 <GPIO_Init+0x242>
 8000670:	23ff      	movs	r3, #255	@ 0xff
 8000672:	e008      	b.n	8000686 <GPIO_Init+0x242>
 8000674:	2304      	movs	r3, #4
 8000676:	e006      	b.n	8000686 <GPIO_Init+0x242>
 8000678:	2303      	movs	r3, #3
 800067a:	e004      	b.n	8000686 <GPIO_Init+0x242>
 800067c:	2302      	movs	r3, #2
 800067e:	e002      	b.n	8000686 <GPIO_Init+0x242>
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <GPIO_Init+0x242>
 8000684:	2300      	movs	r3, #0
 8000686:	74fb      	strb	r3, [r7, #19]

		AFIO_PCLK_EN();
 8000688:	4b44      	ldr	r3, [pc, #272]	@ (800079c <GPIO_Init+0x358>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a43      	ldr	r2, [pc, #268]	@ (800079c <GPIO_Init+0x358>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6193      	str	r3, [r2, #24]
		AFIO->EXTTCR[temp1] = (portcode << (temp2 * 4));
 8000694:	7cfa      	ldrb	r2, [r7, #19]
 8000696:	7d3b      	ldrb	r3, [r7, #20]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	fa02 f103 	lsl.w	r1, r2, r3
 800069e:	4a40      	ldr	r2, [pc, #256]	@ (80007a0 <GPIO_Init+0x35c>)
 80006a0:	7d7b      	ldrb	r3, [r7, #21]
 80006a2:	3302      	adds	r3, #2
 80006a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a8:	4b35      	ldr	r3, [pc, #212]	@ (8000780 <GPIO_Init+0x33c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a31      	ldr	r2, [pc, #196]	@ (8000780 <GPIO_Init+0x33c>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6013      	str	r3, [r2, #0]
		break;
 80006be:	e038      	b.n	8000732 <GPIO_Init+0x2ee>
	case GPIO_MODE_ALTFN:
		AlternativeMode_Init(pGPIOHandle, posPinNumber, &temp);
 80006c0:	f107 020c 	add.w	r2, r7, #12
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	4619      	mov	r1, r3
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fe57 	bl	800037c <AlternativeMode_Init>

		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber));
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	7dba      	ldrb	r2, [r7, #22]
 80006d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	2203      	movs	r2, #3
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	7dba      	ldrb	r2, [r7, #22]
 80006ec:	4001      	ands	r1, r0
 80006ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[posReg] &= ~(3 << (4 * posPinNumber + 2));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	7dba      	ldrb	r2, [r7, #22]
 80006f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	3302      	adds	r3, #2
 8000702:	2203      	movs	r2, #3
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	4618      	mov	r0, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7dba      	ldrb	r2, [r7, #22]
 8000712:	4001      	ands	r1, r0
 8000714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->CR[posReg] |= temp;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	7dba      	ldrb	r2, [r7, #22]
 800071e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000722:	68f9      	ldr	r1, [r7, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	7dba      	ldrb	r2, [r7, #22]
 800072a:	4301      	orrs	r1, r0
 800072c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		break;
 8000730:	bf00      	nop
	}

	temp = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]

	// configure pull up/pull down
	temp |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7a1b      	ldrb	r3, [r3, #8]
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	461a      	mov	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]

	pGPIOHandle->pGPIOx->ODR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68da      	ldr	r2, [r3, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	4619      	mov	r1, r3
 8000758:	2301      	movs	r3, #1
 800075a:	408b      	lsls	r3, r1
 800075c:	43db      	mvns	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	400a      	ands	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68d9      	ldr	r1, [r3, #12]
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	430a      	orrs	r2, r1
 8000776:	60da      	str	r2, [r3, #12]
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010400 	.word	0x40010400
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40011000 	.word	0x40011000
 8000790:	40011400 	.word	0x40011400
 8000794:	40011800 	.word	0x40011800
 8000798:	40012000 	.word	0x40012000
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010000 	.word	0x40010000

080007a4 <GPIO_WritePin>:
	value = (uint16_t)(pGPIOx->IDR);
	return value;
}

void GPIO_WritePin(GPIO_TypeDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
 80007b0:	4613      	mov	r3, r2
 80007b2:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET)
 80007b4:	78bb      	ldrb	r3, [r7, #2]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d109      	bne.n	80007ce <GPIO_WritePin+0x2a>
	{
		// write 1 to the output data register at the bit field corressponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	78fa      	ldrb	r2, [r7, #3]
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]
	else
	{
		// write 0 to the output data register at the bit field corressponding to the pin number
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80007cc:	e009      	b.n	80007e2 <GPIO_WritePin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	78fa      	ldrb	r2, [r7, #3]
 80007d4:	2101      	movs	r1, #1
 80007d6:	fa01 f202 	lsl.w	r2, r1, r2
 80007da:	43d2      	mvns	r2, r2
 80007dc:	401a      	ands	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	60da      	str	r2, [r3, #12]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <GPIO_Toggle>:
{
	pGPIOx->ODR = Value;
}

void GPIO_Toggle(GPIO_TypeDef_t *pGPIOx, uint8_t PinNumber)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	78fa      	ldrb	r2, [r7, #3]
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	405a      	eors	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60da      	str	r2, [r3, #12]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{ // call when IRQ occur
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	// clear
	EXTI->PR |= (1 << PinNumber);
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <GPIO_IRQHandling+0x30>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	4611      	mov	r1, r2
 800082c:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <GPIO_IRQHandling+0x30>)
 800082e:	430b      	orrs	r3, r1
 8000830:	6153      	str	r3, [r2, #20]
	GPIO_ExternalInterruptEventsCallback(PinNumber);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f86f 	bl	8000918 <GPIO_ExternalInterruptEventsCallback>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010400 	.word	0x40010400

08000848 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff ffe1 	bl	8000814 <GPIO_IRQHandling>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_1);
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff ffda 	bl	8000814 <GPIO_IRQHandling>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_2);
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff ffd3 	bl	8000814 <GPIO_IRQHandling>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_3);
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff ffcc 	bl	8000814 <GPIO_IRQHandling>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 8000884:	2004      	movs	r0, #4
 8000886:	f7ff ffc5 	bl	8000814 <GPIO_IRQHandling>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	uint8_t pinNumber;
	for (uint8_t i = 5; i < 10; i++)
 8000896:	2305      	movs	r3, #5
 8000898:	71bb      	strb	r3, [r7, #6]
 800089a:	e00e      	b.n	80008ba <EXTI9_5_IRQHandler+0x2a>
	{
		if ((EXTI->PR >> i) & 1)
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <EXTI9_5_IRQHandler+0x40>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	fa22 f303 	lsr.w	r3, r2, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <EXTI9_5_IRQHandler+0x24>
		{
			pinNumber = i;
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	71fb      	strb	r3, [r7, #7]
			break;
 80008b2:	e005      	b.n	80008c0 <EXTI9_5_IRQHandler+0x30>
	for (uint8_t i = 5; i < 10; i++)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	3301      	adds	r3, #1
 80008b8:	71bb      	strb	r3, [r7, #6]
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	2b09      	cmp	r3, #9
 80008be:	d9ed      	bls.n	800089c <EXTI9_5_IRQHandler+0xc>
		}
	}

	GPIO_IRQHandling(pinNumber);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ffa6 	bl	8000814 <GPIO_IRQHandling>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40010400 	.word	0x40010400

080008d4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	uint8_t pinNumber;
	for (uint8_t i = 10; i < 16; i++)
 80008da:	230a      	movs	r3, #10
 80008dc:	71bb      	strb	r3, [r7, #6]
 80008de:	e00e      	b.n	80008fe <EXTI15_10_IRQHandler+0x2a>
	{
		if ((EXTI->PR >> i) & 1)
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <EXTI15_10_IRQHandler+0x40>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <EXTI15_10_IRQHandler+0x24>
		{
			pinNumber = i;
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	71fb      	strb	r3, [r7, #7]
			break;
 80008f6:	e005      	b.n	8000904 <EXTI15_10_IRQHandler+0x30>
	for (uint8_t i = 10; i < 16; i++)
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	3301      	adds	r3, #1
 80008fc:	71bb      	strb	r3, [r7, #6]
 80008fe:	79bb      	ldrb	r3, [r7, #6]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d9ed      	bls.n	80008e0 <EXTI15_10_IRQHandler+0xc>
		}
	}

	GPIO_IRQHandling(pinNumber);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff84 	bl	8000814 <GPIO_IRQHandling>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40010400 	.word	0x40010400

08000918 <GPIO_ExternalInterruptEventsCallback>:

__weak void GPIO_ExternalInterruptEventsCallback(uint8_t PinNumber) {}
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <RCC_GetSysClockFreq>:

	CLEAR_REG(RCC->CFGR, RCC_CFGR_PPRE2, 0x7);
	SET_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_ClkInitStruct->APB2CLKDivider);
}

uint32_t RCC_GetSysClockFreq(void) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	uint32_t sysclk_freq = RCC_HSI_FREQ;
 8000932:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <RCC_GetSysClockFreq+0x1c>)
 8000934:	607b      	str	r3, [r7, #4]

	/* Return 8MHz if sysclk source is HSI or HSE */
	if ((READ_REG(RCC->CFGR, RCC_CFGR_SWS, RCC_CFGR_SWS_MASK) & 0x2) == 0) {
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <RCC_GetSysClockFreq+0x20>)
 8000938:	685b      	ldr	r3, [r3, #4]
		return sysclk_freq;
 800093a:	687b      	ldr	r3, [r7, #4]
	if(mul_factor == RCC_PLL_MUL16_2){
		return sysclk_freq * 16U;
	}

	return sysclk_freq * (2 + mul_factor);
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	007a1200 	.word	0x007a1200
 800094c:	40021000 	.word	0x40021000

08000950 <RCC_GetHClockFreq>:

uint32_t RCC_GetHClockFreq(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	uint32_t sys_clk 		= RCC_GetSysClockFreq();
 8000956:	f7ff ffe9 	bl	800092c <RCC_GetSysClockFreq>
 800095a:	6078      	str	r0, [r7, #4]
	uint8_t	ahb_div_factor	= READ_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_MASK);
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <RCC_GetHClockFreq+0x50>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f023 030f 	bic.w	r3, r3, #15
 8000968:	70fb      	strb	r3, [r7, #3]
	
	switch (ahb_div_factor)
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	2b0b      	cmp	r3, #11
 800096e:	dc02      	bgt.n	8000976 <RCC_GetHClockFreq+0x26>
 8000970:	2b08      	cmp	r3, #8
 8000972:	da04      	bge.n	800097e <RCC_GetHClockFreq+0x2e>
 8000974:	e00f      	b.n	8000996 <RCC_GetHClockFreq+0x46>
 8000976:	3b0c      	subs	r3, #12
 8000978:	2b03      	cmp	r3, #3
 800097a:	d80c      	bhi.n	8000996 <RCC_GetHClockFreq+0x46>
 800097c:	e005      	b.n	800098a <RCC_GetHClockFreq+0x3a>
	{
		case RCC_SYSCLK_DIV2 ... RCC_SYSCLK_DIV16:
			return sys_clk >> (ahb_div_factor - RCC_SYSCLK_DIV2 + 1);
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	3b07      	subs	r3, #7
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	fa22 f303 	lsr.w	r3, r2, r3
 8000988:	e006      	b.n	8000998 <RCC_GetHClockFreq+0x48>
		
		case RCC_SYSCLK_DIV64 ... RCC_SYSCLK_DIV512:
			return sys_clk >> (ahb_div_factor - RCC_SYSCLK_DIV64 + 6);
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	3b06      	subs	r3, #6
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	fa22 f303 	lsr.w	r3, r2, r3
 8000994:	e000      	b.n	8000998 <RCC_GetHClockFreq+0x48>

		default:
			return sys_clk;
 8000996:	687b      	ldr	r3, [r7, #4]
	}
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000

080009a4 <RCC_GetPClock1Freq>:

uint32_t RCC_GetPClock1Freq(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	uint32_t hclk 			= RCC_GetHClockFreq();
 80009aa:	f7ff ffd1 	bl	8000950 <RCC_GetHClockFreq>
 80009ae:	6078      	str	r0, [r7, #4]
	uint8_t	apb1_div_factor	= READ_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_CFGR_PPRE1_MASK);
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <RCC_GetPClock1Freq+0x34>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2300      	movs	r3, #0
 80009b6:	70fb      	strb	r3, [r7, #3]

	switch (apb1_div_factor)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	3b04      	subs	r3, #4
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d805      	bhi.n	80009cc <RCC_GetPClock1Freq+0x28>
	{
		case RCC_HCLK_DIV2 ... RCC_HCLK_DIV16:
			return hclk >> (apb1_div_factor - RCC_HCLK_DIV2 + 1);
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	3b03      	subs	r3, #3
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ca:	e000      	b.n	80009ce <RCC_GetPClock1Freq+0x2a>
		
		default:
			return hclk;
 80009cc:	687b      	ldr	r3, [r7, #4]
	}
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <USART_PeriClockControl>:

/*
 * Peripheral clock setup
 */
void USART_PeriClockControl(USART_TypeDef_t *pUSARTx, uint8_t EnorDi)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	if (!EnorDi)
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d036      	beq.n	8000a5c <USART_PeriClockControl+0x80>
		return;
	if (pUSARTx == USART1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <USART_PeriClockControl+0x8c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <USART_PeriClockControl+0x28>
		USART1_PCLK_EN();
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <USART_PeriClockControl+0x90>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <USART_PeriClockControl+0x90>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6193      	str	r3, [r2, #24]
 8000a02:	e02c      	b.n	8000a5e <USART_PeriClockControl+0x82>
	else if (pUSARTx == USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a1a      	ldr	r2, [pc, #104]	@ (8000a70 <USART_PeriClockControl+0x94>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <USART_PeriClockControl+0x3e>
		USART2_PCLK_EN();
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	e021      	b.n	8000a5e <USART_PeriClockControl+0x82>
	else if (pUSARTx == USART3)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <USART_PeriClockControl+0x98>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <USART_PeriClockControl+0x54>
		USART3_PCLK_EN();
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a11      	ldr	r2, [pc, #68]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	e016      	b.n	8000a5e <USART_PeriClockControl+0x82>
	else if (pUSARTx == UART4)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a11      	ldr	r2, [pc, #68]	@ (8000a78 <USART_PeriClockControl+0x9c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <USART_PeriClockControl+0x6a>
		UART4_PCLK_EN();
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a42:	61d3      	str	r3, [r2, #28]
 8000a44:	e00b      	b.n	8000a5e <USART_PeriClockControl+0x82>
	else if (pUSARTx == UART5)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <USART_PeriClockControl+0xa0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d107      	bne.n	8000a5e <USART_PeriClockControl+0x82>
		UART5_PCLK_EN();
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <USART_PeriClockControl+0x90>)
 8000a54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	e000      	b.n	8000a5e <USART_PeriClockControl+0x82>
		return;
 8000a5c:	bf00      	nop
}
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40004800 	.word	0x40004800
 8000a78:	40004c00 	.word	0x40004c00
 8000a7c:	40005000 	.word	0x40005000

08000a80 <USART_Start>:

void USART_Start(USART_TypeDef_t *pUSARTx)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60da      	str	r2, [r3, #12]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
	...

08000aa0 <USART_Init>:
/*
 * Init and De-Init
 */

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	// enable clock for USART
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff94 	bl	80009dc <USART_PeriClockControl>
	uint32_t reg = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
	// enable USART Tx and Rx engines according to the USART Mode configuration item
	switch (pUSARTHandle->USART_Config.USART_Mode)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d00f      	beq.n	8000ae0 <USART_Init+0x40>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	dc12      	bgt.n	8000aea <USART_Init+0x4a>
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <USART_Init+0x36>
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10e      	bne.n	8000aea <USART_Init+0x4a>
	{
	case USART_MODE_ONLY_RX:
		reg |= (1 << USART_CR1_RE);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	60fb      	str	r3, [r7, #12]
		break;
 8000ad4:	e009      	b.n	8000aea <USART_Init+0x4a>
	case USART_MODE_ONLY_TX:
		reg |= (1 << USART_CR1_TE);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	60fb      	str	r3, [r7, #12]
		break;
 8000ade:	e004      	b.n	8000aea <USART_Init+0x4a>
	case USART_MODE_TXRX:
		reg |= (1 << USART_CR1_TE) | (1 << USART_CR1_RE);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f043 030c 	orr.w	r3, r3, #12
 8000ae6:	60fb      	str	r3, [r7, #12]
		break;
 8000ae8:	bf00      	nop
	default:
	}
	// configure the word length
	reg |= (pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7b5b      	ldrb	r3, [r3, #13]
 8000aee:	031b      	lsls	r3, r3, #12
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
	// configure parity bit
	switch (pUSARTHandle->USART_Config.USART_ParityControl)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7b9b      	ldrb	r3, [r3, #14]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d010      	beq.n	8000b20 <USART_Init+0x80>
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	dc13      	bgt.n	8000b2a <USART_Init+0x8a>
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <USART_Init+0x6c>
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d005      	beq.n	8000b16 <USART_Init+0x76>
 8000b0a:	e00e      	b.n	8000b2a <USART_Init+0x8a>
	{
	case USART_PARITY_DISABLE:
		reg &= ~(1 << USART_CR1_PCE);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000b12:	60fb      	str	r3, [r7, #12]
		break;
 8000b14:	e009      	b.n	8000b2a <USART_Init+0x8a>
	case USART_PARITY_EN_EVEN:
		reg |= (1 << USART_CR1_PCE);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b1c:	60fb      	str	r3, [r7, #12]
		break;
 8000b1e:	e004      	b.n	8000b2a <USART_Init+0x8a>
	case USART_PARITY_EN_ODD:
		reg |= (1 << USART_CR1_PCE) | (1 << USART_CR1_PS);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000b26:	60fb      	str	r3, [r7, #12]
		break;
 8000b28:	bf00      	nop
	default:
	}

	pUSARTHandle->pUSARTx->CR1 = reg;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	60da      	str	r2, [r3, #12]

	reg = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
	// configure the number of stop bit
	reg |= (pUSARTHandle->USART_Config.USART_NumberOfStopBits << USART_CR2_STOP);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7b1b      	ldrb	r3, [r3, #12]
 8000b3a:	031b      	lsls	r3, r3, #12
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]

	pUSARTHandle->pUSARTx->CR2 = reg;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	611a      	str	r2, [r3, #16]

	reg = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]

	// configure hardware flow control
	switch (pUSARTHandle->USART_Config.USART_HWFLowControl)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7bdb      	ldrb	r3, [r3, #15]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d826      	bhi.n	8000ba4 <USART_Init+0x104>
 8000b56:	a201      	add	r2, pc, #4	@ (adr r2, 8000b5c <USART_Init+0xbc>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b7f 	.word	0x08000b7f
 8000b64:	08000b89 	.word	0x08000b89
 8000b68:	08000b93 	.word	0x08000b93
	{
	case USART_HW_FLOW_CTRL_NONE:
		reg &= ~(1 << USART_CR3_CTSE);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000b72:	60fb      	str	r3, [r7, #12]
		reg &= ~(1 << USART_CR3_RTSE);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b7a:	60fb      	str	r3, [r7, #12]
		break;
 8000b7c:	e012      	b.n	8000ba4 <USART_Init+0x104>
	case USART_HW_FLOW_CTRL_CTS:
		reg |= (1 << USART_CR3_CTSE);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b84:	60fb      	str	r3, [r7, #12]
		break;
 8000b86:	e00d      	b.n	8000ba4 <USART_Init+0x104>
	case USART_HW_FLOW_CTRL_RTS:
		reg |= (1 << USART_CR3_RTSE);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	60fb      	str	r3, [r7, #12]
		break;
 8000b90:	e008      	b.n	8000ba4 <USART_Init+0x104>
	case USART_HW_FLOW_CTRL_CTS_RTS:
		reg |= (1 << USART_CR3_CTSE);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b98:	60fb      	str	r3, [r7, #12]
		reg |= (1 << USART_CR3_RTSE);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba0:	60fb      	str	r3, [r7, #12]
		break;
 8000ba2:	bf00      	nop
	default:
	}
	pUSARTHandle->pUSARTx->CR3 = reg;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	615a      	str	r2, [r3, #20]

	// Implement the code to configure the baud rate
	// We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baudrate);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	f000 f804 	bl	8000bc4 <USART_SetBaudRate>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <USART_SetBaudRate>:

void USART_SetBaudRate(USART_TypeDef_t *pUSARTx, uint32_t BaudRate)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;

	uint32_t usartdiv;

	uint32_t M_part, F_part;
	uint32_t reg = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]

	if(pUSARTx == USART1) PCLKx = RCC_GetPClock1Freq();
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c54 <USART_SetBaudRate+0x90>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d103      	bne.n	8000be2 <USART_SetBaudRate+0x1e>
 8000bda:	f7ff fee3 	bl	80009a4 <RCC_GetPClock1Freq>
 8000bde:	61f8      	str	r0, [r7, #28]
 8000be0:	e002      	b.n	8000be8 <USART_SetBaudRate+0x24>
	else PCLKx = RCC_GetPClock1Freq();
 8000be2:	f7ff fedf 	bl	80009a4 <RCC_GetPClock1Freq>
 8000be6:	61f8      	str	r0, [r7, #28]

	usartdiv = (25 * PCLKx) / (4 * BaudRate);
 8000be8:	69fa      	ldr	r2, [r7, #28]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	009a      	lsls	r2, r3, #2
 8000bf2:	441a      	add	r2, r3
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]

	M_part = usartdiv / 100;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4a15      	ldr	r2, [pc, #84]	@ (8000c58 <USART_SetBaudRate+0x94>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	613b      	str	r3, [r7, #16]
	reg |= M_part << 4;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]

	F_part = usartdiv % 100;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <USART_SetBaudRate+0x94>)
 8000c18:	fba2 1203 	umull	r1, r2, r2, r3
 8000c1c:	0952      	lsrs	r2, r2, #5
 8000c1e:	2164      	movs	r1, #100	@ 0x64
 8000c20:	fb01 f202 	mul.w	r2, r1, r2
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]

	F_part = (((F_part * 16) + 50) / 100) & 0x0F;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	3332      	adds	r3, #50	@ 0x32
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <USART_SetBaudRate+0x94>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	095b      	lsrs	r3, r3, #5
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]

	reg |= F_part;
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]

	pUSARTx->BRR = reg;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	609a      	str	r2, [r3, #8]
}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40013800 	.word	0x40013800
 8000c58:	51eb851f 	.word	0x51eb851f

08000c5c <USART_SendData>:
/*
 * Data send and Receive
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t length)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	while (length > 0)
 8000c68:	e030      	b.n	8000ccc <USART_SendData+0x70>
	{
		// wait until TXE flag is set in the SR
		while (!((pUSARTHandle->pUSARTx->SR >> USART_SR_TXE) & 1))
 8000c6a:	bf00      	nop
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	09db      	lsrs	r3, r3, #7
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f7      	beq.n	8000c6c <USART_SendData+0x10>
			;

		// Check the USART_WordLength
		if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	7b5b      	ldrb	r3, [r3, #13]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d118      	bne.n	8000cb6 <USART_SendData+0x5a>
		{
			// check for USART_ParityControl
			if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	7b9b      	ldrb	r3, [r3, #14]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10b      	bne.n	8000ca4 <USART_SendData+0x48>
			{
				pUSARTHandle->pUSARTx->DR = (*((uint16_t *)pTxBuffer) & (uint16_t)0x01FF);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c9a:	605a      	str	r2, [r3, #4]
				// 9 bits of user data will be sent
				(uint16_t *)pTxBuffer++;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	e010      	b.n	8000cc6 <USART_SendData+0x6a>
			}
			else
			{
				pUSARTHandle->pUSARTx->DR = (*(pTxBuffer) & (uint8_t)0xFF);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
				// Parity bit is used in this transfer . so 8bits of user data will be sent
				pTxBuffer++;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	e007      	b.n	8000cc6 <USART_SendData+0x6a>
			}
		}
		else
		{
			// This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*(pTxBuffer) & (uint8_t)0xFF);
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]

			// increment the transmit buffer address by 1
			pTxBuffer++;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
		}
		length--;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
	while (length > 0)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1cb      	bne.n	8000c6a <USART_SendData+0xe>
	}
	// wailt till TC flag is set in the SR
	while (!((pUSARTHandle->pUSARTx->SR >> USART_SR_TC) & 1))
 8000cd2:	bf00      	nop
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	099b      	lsrs	r3, r3, #6
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f7      	beq.n	8000cd4 <USART_SendData+0x78>
		;
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <__libc_init_array>:
 8000cf0:	b570      	push	{r4, r5, r6, lr}
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	4d0c      	ldr	r5, [pc, #48]	@ (8000d28 <__libc_init_array+0x38>)
 8000cf6:	4c0d      	ldr	r4, [pc, #52]	@ (8000d2c <__libc_init_array+0x3c>)
 8000cf8:	1b64      	subs	r4, r4, r5
 8000cfa:	10a4      	asrs	r4, r4, #2
 8000cfc:	42a6      	cmp	r6, r4
 8000cfe:	d109      	bne.n	8000d14 <__libc_init_array+0x24>
 8000d00:	f000 f81a 	bl	8000d38 <_init>
 8000d04:	2600      	movs	r6, #0
 8000d06:	4d0a      	ldr	r5, [pc, #40]	@ (8000d30 <__libc_init_array+0x40>)
 8000d08:	4c0a      	ldr	r4, [pc, #40]	@ (8000d34 <__libc_init_array+0x44>)
 8000d0a:	1b64      	subs	r4, r4, r5
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	42a6      	cmp	r6, r4
 8000d10:	d105      	bne.n	8000d1e <__libc_init_array+0x2e>
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d18:	4798      	blx	r3
 8000d1a:	3601      	adds	r6, #1
 8000d1c:	e7ee      	b.n	8000cfc <__libc_init_array+0xc>
 8000d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d22:	4798      	blx	r3
 8000d24:	3601      	adds	r6, #1
 8000d26:	e7f2      	b.n	8000d0e <__libc_init_array+0x1e>
 8000d28:	08000d8c 	.word	0x08000d8c
 8000d2c:	08000d8c 	.word	0x08000d8c
 8000d30:	08000d8c 	.word	0x08000d8c
 8000d34:	08000d90 	.word	0x08000d90

08000d38 <_init>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	bf00      	nop
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr

08000d44 <_fini>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	bf00      	nop
 8000d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4a:	bc08      	pop	{r3}
 8000d4c:	469e      	mov	lr, r3
 8000d4e:	4770      	bx	lr
