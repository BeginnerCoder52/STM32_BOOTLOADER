
APP_CURRENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c0  08004130  08004130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080045f0  080045f8  000015f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080045f0  080045f0  000015f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080045f0  080045f0  000015f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080045f0  080045f8  000015f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f0  080045f0  000015f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045f4  080045f4  000015f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 11 .app_cur_metadata 00000000  0800fc00  0800fc00  000015f8  2**0
                  CONTENTS
 12 .ARM.attributes 00000029  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c52  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000457  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  000026d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f2  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000519  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017c7  00000000  00000000  00002e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007d1a  00000000  00000000  000045fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c314  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000460  00000000  00000000  0000c358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0000c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004130 <__do_global_dtors_aux>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4c05      	ldr	r4, [pc, #20]	@ (8004148 <__do_global_dtors_aux+0x18>)
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	b933      	cbnz	r3, 8004146 <__do_global_dtors_aux+0x16>
 8004138:	4b04      	ldr	r3, [pc, #16]	@ (800414c <__do_global_dtors_aux+0x1c>)
 800413a:	b113      	cbz	r3, 8004142 <__do_global_dtors_aux+0x12>
 800413c:	4804      	ldr	r0, [pc, #16]	@ (8004150 <__do_global_dtors_aux+0x20>)
 800413e:	f3af 8000 	nop.w
 8004142:	2301      	movs	r3, #1
 8004144:	7023      	strb	r3, [r4, #0]
 8004146:	bd10      	pop	{r4, pc}
 8004148:	20000000 	.word	0x20000000
 800414c:	00000000 	.word	0x00000000
 8004150:	080045d8 	.word	0x080045d8

08004154 <frame_dummy>:
 8004154:	b508      	push	{r3, lr}
 8004156:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <frame_dummy+0x10>)
 8004158:	b11b      	cbz	r3, 8004162 <frame_dummy+0xe>
 800415a:	4903      	ldr	r1, [pc, #12]	@ (8004168 <frame_dummy+0x14>)
 800415c:	4803      	ldr	r0, [pc, #12]	@ (800416c <frame_dummy+0x18>)
 800415e:	f3af 8000 	nop.w
 8004162:	bd08      	pop	{r3, pc}
 8004164:	00000000 	.word	0x00000000
 8004168:	20000004 	.word	0x20000004
 800416c:	080045d8 	.word	0x080045d8

08004170 <clock_init>:
#include "stm32f103xx_rcc_driver.h"
#include "app_meta.h"
#include "stm32f103xx_flash_driver.h"

static void clock_init(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
    // Bật HSI, chọn HSI làm SYSCLK (đơn giản, không PLL)
    RCC->CR |= (1 << 0);                 // HSION
 8004174:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <clock_init+0x3c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0c      	ldr	r2, [pc, #48]	@ (80041ac <clock_init+0x3c>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & (1 << 1)));        // HSIRDY
 8004180:	bf00      	nop
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <clock_init+0x3c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f9      	beq.n	8004182 <clock_init+0x12>
    RCC->CFGR &= ~(0x3 << 0);            // SW = HSI
 800418e:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <clock_init+0x3c>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4a06      	ldr	r2, [pc, #24]	@ (80041ac <clock_init+0x3c>)
 8004194:	f023 0303 	bic.w	r3, r3, #3
 8004198:	6053      	str	r3, [r2, #4]
    RCC->CFGR |=  (0x0 << 0);
 800419a:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <clock_init+0x3c>)
 800419c:	4a03      	ldr	r2, [pc, #12]	@ (80041ac <clock_init+0x3c>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	6053      	str	r3, [r2, #4]
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000

080041b0 <led_init>:

static void led_init(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
    GPIOC_PCLK_EN();
 80041b4:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <led_init+0x30>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4a09      	ldr	r2, [pc, #36]	@ (80041e0 <led_init+0x30>)
 80041ba:	f043 0310 	orr.w	r3, r3, #16
 80041be:	6193      	str	r3, [r2, #24]

    // PC13 output push-pull, tốc độ thấp
    // Cấu hình thanh ghi như driver của bạn yêu cầu:
    // PC13 nằm ở CRH (pins 8..15), mode=output, cfg=GP push-pull
    // Nếu có API GPIO_Init của bạn, dùng theo kiểu đó; còn không, set thô:
    GPIOC->CR[1] &= ~(0xF << ((13 - 8) * 4));      /* clear CRH nibble for PC13 */
 80041c0:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <led_init+0x34>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a07      	ldr	r2, [pc, #28]	@ (80041e4 <led_init+0x34>)
 80041c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041ca:	6053      	str	r3, [r2, #4]
    GPIOC->CR[1] |=  (0x2 << ((13 - 8) * 4));      /* MODE13 = 10 (output 2MHz), CNF13 = 00 (GP push-pull) */
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <led_init+0x34>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <led_init+0x34>)
 80041d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041d6:	6053      	str	r3, [r2, #4]
    // CNF giữ 00
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40011000 	.word	0x40011000

080041e8 <led_toggle>:

static void led_toggle(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
    // PC13 active-low trên board BluePill: set=1 -> off, reset=0 -> on
    if (GPIOC->ODR & (1 << 13))
 80041ec:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <led_toggle+0x34>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d006      	beq.n	8004206 <led_toggle+0x1e>
        GPIOC->ODR &= ~(1 << 13);
 80041f8:	4b08      	ldr	r3, [pc, #32]	@ (800421c <led_toggle+0x34>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a07      	ldr	r2, [pc, #28]	@ (800421c <led_toggle+0x34>)
 80041fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004202:	60d3      	str	r3, [r2, #12]
    else
        GPIOC->ODR |=  (1 << 13);
}
 8004204:	e005      	b.n	8004212 <led_toggle+0x2a>
        GPIOC->ODR |=  (1 << 13);
 8004206:	4b05      	ldr	r3, [pc, #20]	@ (800421c <led_toggle+0x34>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4a04      	ldr	r2, [pc, #16]	@ (800421c <led_toggle+0x34>)
 800420c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004210:	60d3      	str	r3, [r2, #12]
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40011000 	.word	0x40011000

08004220 <delay>:

static void delay(volatile uint32_t t)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    while(t--) __asm volatile("nop");
 8004228:	e000      	b.n	800422c <delay+0xc>
 800422a:	bf00      	nop
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	1e5a      	subs	r2, r3, #1
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f9      	bne.n	800422a <delay+0xa>
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
	...

08004244 <ensure_footer_valid>:

static void ensure_footer_valid(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
    app_footer_t f;
    f.valid = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
    f.version = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]

    // đọc footer hiện tại
    const app_footer_t *rom = (const app_footer_t *)APP_FLAGS_ADDR;
 8004252:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <ensure_footer_valid+0x48>)
 8004254:	60fb      	str	r3, [r7, #12]
    f = *rom;
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	6810      	ldr	r0, [r2, #0]
 800425c:	6851      	ldr	r1, [r2, #4]
 800425e:	c303      	stmia	r3!, {r0, r1}

    if (f.valid != APP_VALID_FLAG_VALUE) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d00d      	beq.n	8004282 <ensure_footer_valid+0x3e>
        f.valid = APP_VALID_FLAG_VALUE;
 8004266:	2301      	movs	r3, #1
 8004268:	607b      	str	r3, [r7, #4]
        f.version = APP_VERSION_VALUE;
 800426a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800426e:	60bb      	str	r3, [r7, #8]
        FLASH_Erase(APP_FLAGS_ADDR);
 8004270:	4806      	ldr	r0, [pc, #24]	@ (800428c <ensure_footer_valid+0x48>)
 8004272:	f000 f8d9 	bl	8004428 <FLASH_Erase>
        FLASH_Write_Data(APP_FLAGS_ADDR, (uint32_t*)&f, sizeof(app_footer_t)/4);
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	2202      	movs	r2, #2
 800427a:	4619      	mov	r1, r3
 800427c:	4803      	ldr	r0, [pc, #12]	@ (800428c <ensure_footer_valid+0x48>)
 800427e:	f000 f863 	bl	8004348 <FLASH_Write_Data>
    }
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	08011c00 	.word	0x08011c00

08004290 <main>:

int main(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
    clock_init();
 8004294:	f7ff ff6c 	bl	8004170 <clock_init>
    led_init();
 8004298:	f7ff ff8a 	bl	80041b0 <led_init>
    ensure_footer_valid();   // để BOOTLOADER coi app hợp lệ rồi nhảy lần sau
 800429c:	f7ff ffd2 	bl	8004244 <ensure_footer_valid>

    while (1) {
        led_toggle();
 80042a0:	f7ff ffa2 	bl	80041e8 <led_toggle>
        delay(500000);
 80042a4:	4802      	ldr	r0, [pc, #8]	@ (80042b0 <main+0x20>)
 80042a6:	f7ff ffbb 	bl	8004220 <delay>
        led_toggle();
 80042aa:	bf00      	nop
 80042ac:	e7f8      	b.n	80042a0 <main+0x10>
 80042ae:	bf00      	nop
 80042b0:	0007a120 	.word	0x0007a120

080042b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042b4:	480d      	ldr	r0, [pc, #52]	@ (80042ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042bc:	480c      	ldr	r0, [pc, #48]	@ (80042f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80042be:	490d      	ldr	r1, [pc, #52]	@ (80042f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042c0:	4a0d      	ldr	r2, [pc, #52]	@ (80042f8 <LoopForever+0xe>)
  movs r3, #0
 80042c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042c4:	e002      	b.n	80042cc <LoopCopyDataInit>

080042c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ca:	3304      	adds	r3, #4

080042cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042d0:	d3f9      	bcc.n	80042c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042d2:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80042d4:	4c0a      	ldr	r4, [pc, #40]	@ (8004300 <LoopForever+0x16>)
  movs r3, #0
 80042d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d8:	e001      	b.n	80042de <LoopFillZerobss>

080042da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042dc:	3204      	adds	r2, #4

080042de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042e0:	d3fb      	bcc.n	80042da <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80042e2:	f000 f955 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80042e6:	f7ff ffd3 	bl	8004290 <main>

080042ea <LoopForever>:

LoopForever:
  b LoopForever
 80042ea:	e7fe      	b.n	80042ea <LoopForever>
  ldr   r0, =_estack
 80042ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80042f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80042f8:	080045f0 	.word	0x080045f0
  ldr r2, =_sbss
 80042fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8004300:	2000001c 	.word	0x2000001c

08004304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004304:	e7fe      	b.n	8004304 <ADC1_2_IRQHandler>
	...

08004308 <FLASH_Unlock>:
 *      Author: nphuc
 */

#include "stm32f103xx_flash_driver.h"

static inline void FLASH_Unlock(){
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
    FLASH->KEYR = 0x45670123;
 800430c:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <FLASH_Unlock+0x18>)
 800430e:	4a05      	ldr	r2, [pc, #20]	@ (8004324 <FLASH_Unlock+0x1c>)
 8004310:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = 0xCDEF89AB;
 8004312:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <FLASH_Unlock+0x18>)
 8004314:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <FLASH_Unlock+0x20>)
 8004316:	605a      	str	r2, [r3, #4]
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	40022000 	.word	0x40022000
 8004324:	45670123 	.word	0x45670123
 8004328:	cdef89ab 	.word	0xcdef89ab

0800432c <FLASH_Lock>:

static inline void FLASH_Lock(){
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
    FLASH->CR |= (1 << FLASH_CR_LOCK);
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <FLASH_Lock+0x18>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	4a03      	ldr	r2, [pc, #12]	@ (8004344 <FLASH_Lock+0x18>)
 8004336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433a:	6113      	str	r3, [r2, #16]
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	40022000 	.word	0x40022000

08004348 <FLASH_Write_Data>:

uint8_t FLASH_Write_Data(uint32_t PageAddress, uint32_t *pTxBuffer, uint16_t length){
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
	FLASH_Unlock();
 8004356:	f7ff ffd7 	bl	8004308 <FLASH_Unlock>
	uint8_t oldPage = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	77fb      	strb	r3, [r7, #31]
    while(length > 0){
 800435e:	e057      	b.n	8004410 <FLASH_Write_Data+0xc8>
    	uint8_t currentPage = (PageAddress / 0x0400) & 0x0FF;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	0a9b      	lsrs	r3, r3, #10
 8004364:	77bb      	strb	r3, [r7, #30]
    	uint32_t pageBaseAddress = 0x08000000 + currentPage * 0x400;
 8004366:	7fbb      	ldrb	r3, [r7, #30]
 8004368:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800436c:	029b      	lsls	r3, r3, #10
 800436e:	61bb      	str	r3, [r7, #24]
    	if(currentPage > 127) return FLASH_ERROR;
 8004370:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004374:	2b00      	cmp	r3, #0
 8004376:	da01      	bge.n	800437c <FLASH_Write_Data+0x34>
 8004378:	2300      	movs	r3, #0
 800437a:	e04f      	b.n	800441c <FLASH_Write_Data+0xd4>
    	if(oldPage != currentPage){
 800437c:	7ffa      	ldrb	r2, [r7, #31]
 800437e:	7fbb      	ldrb	r3, [r7, #30]
 8004380:	429a      	cmp	r2, r3
 8004382:	d004      	beq.n	800438e <FLASH_Write_Data+0x46>
    		FLASH_Erase(pageBaseAddress);
 8004384:	69b8      	ldr	r0, [r7, #24]
 8004386:	f000 f84f 	bl	8004428 <FLASH_Erase>
    		oldPage = currentPage;
 800438a:	7fbb      	ldrb	r3, [r7, #30]
 800438c:	77fb      	strb	r3, [r7, #31]
    	}

    	uint32_t value = (*pTxBuffer);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	617b      	str	r3, [r7, #20]
        uint16_t lower_half = (uint16_t)(value & 0xFFFF);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	827b      	strh	r3, [r7, #18]
        uint16_t upper_half = (uint16_t)((value >> 16) & 0xFFFF);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	823b      	strh	r3, [r7, #16]

        // Clear flags
        FLASH->SR |= (1 << FLASH_SR_EOP) | (1 << FLASH_SR_PGERR) | (1 << FLASH_SR_WRPRTERR);
 800439e:	4b21      	ldr	r3, [pc, #132]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4a20      	ldr	r2, [pc, #128]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043a4:	f043 030e 	orr.w	r3, r3, #14
 80043a8:	60d3      	str	r3, [r2, #12]

        FLASH->CR |= (1 << FLASH_CR_PG); // flash programming mode
 80043aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6113      	str	r3, [r2, #16]
        // Write lower_half
        *(volatile uint16_t *)PageAddress = lower_half;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8a7a      	ldrh	r2, [r7, #18]
 80043ba:	801a      	strh	r2, [r3, #0]
        while (FLASH->SR & FLASH_SR_BSY);
 80043bc:	bf00      	nop
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043c0:	68db      	ldr	r3, [r3, #12]

        // Write upper_half
        *(volatile uint16_t *)(PageAddress + 2) = upper_half;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3302      	adds	r3, #2
 80043c6:	461a      	mov	r2, r3
 80043c8:	8a3b      	ldrh	r3, [r7, #16]
 80043ca:	8013      	strh	r3, [r2, #0]
        while (FLASH->SR & FLASH_SR_BSY);
 80043cc:	bf00      	nop
 80043ce:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043d0:	68db      	ldr	r3, [r3, #12]
        FLASH->CR &= ~(1 << FLASH_CR_PG);
 80043d2:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	6113      	str	r3, [r2, #16]

        if(((FLASH->SR >> FLASH_SR_PGERR) & 1) || (FLASH->SR >> FLASH_SR_WRPRTERR) & 1)
 80043de:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <FLASH_Write_Data+0xb2>
 80043ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <FLASH_Write_Data+0xdc>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <FLASH_Write_Data+0xb6>
            return FLASH_ERROR;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e00e      	b.n	800441c <FLASH_Write_Data+0xd4>

        // step to next address
        pTxBuffer++;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3304      	adds	r3, #4
 8004402:	60bb      	str	r3, [r7, #8]
        PageAddress+= 4;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3304      	adds	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
        length-= 2;
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	3b02      	subs	r3, #2
 800440e:	80fb      	strh	r3, [r7, #6]
    while(length > 0){
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1a4      	bne.n	8004360 <FLASH_Write_Data+0x18>
    }

    FLASH_Lock();
 8004416:	f7ff ff89 	bl	800432c <FLASH_Lock>
    return FLASH_OK;
 800441a:	2301      	movs	r3, #1
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40022000 	.word	0x40022000

08004428 <FLASH_Erase>:
        PageAddress += 4;
        length--;
    }
}

void FLASH_Erase(uint32_t PageAdress) {
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	// choose page erase mode
	FLASH->CR |= (1 << FLASH_CR_PER);
 8004430:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <FLASH_Erase+0x4c>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	4a0f      	ldr	r2, [pc, #60]	@ (8004474 <FLASH_Erase+0x4c>)
 8004436:	f043 0302 	orr.w	r3, r3, #2
 800443a:	6113      	str	r3, [r2, #16]
	// select page address to erase
	FLASH->AR = PageAdress;
 800443c:	4a0d      	ldr	r2, [pc, #52]	@ (8004474 <FLASH_Erase+0x4c>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6153      	str	r3, [r2, #20]

	FLASH->CR |= (1 << FLASH_CR_STRT);
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <FLASH_Erase+0x4c>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	4a0b      	ldr	r2, [pc, #44]	@ (8004474 <FLASH_Erase+0x4c>)
 8004448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800444c:	6113      	str	r3, [r2, #16]

	// wait BSY reset
	while((FLASH->SR >> FLASH_SR_BSY) & 1);
 800444e:	bf00      	nop
 8004450:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <FLASH_Erase+0x4c>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f9      	bne.n	8004450 <FLASH_Erase+0x28>

	FLASH->CR &= ~(1 << FLASH_CR_PER);
 800445c:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <FLASH_Erase+0x4c>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	4a04      	ldr	r2, [pc, #16]	@ (8004474 <FLASH_Erase+0x4c>)
 8004462:	f023 0302 	bic.w	r3, r3, #2
 8004466:	6113      	str	r3, [r2, #16]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40022000 	.word	0x40022000

08004478 <GPIO_IRQHandling>:
{
	pGPIOx->ODR ^= (1 << PinNumber);
}

void GPIO_IRQHandling(uint8_t PinNumber)
{ // call when IRQ occur
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
	// clear
	EXTI->PR |= (1 << PinNumber);
 8004482:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <GPIO_IRQHandling+0x30>)
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	79fa      	ldrb	r2, [r7, #7]
 8004488:	2101      	movs	r1, #1
 800448a:	fa01 f202 	lsl.w	r2, r1, r2
 800448e:	4611      	mov	r1, r2
 8004490:	4a05      	ldr	r2, [pc, #20]	@ (80044a8 <GPIO_IRQHandling+0x30>)
 8004492:	430b      	orrs	r3, r1
 8004494:	6153      	str	r3, [r2, #20]
	GPIO_ExternalInterruptEventsCallback(PinNumber);
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f86f 	bl	800457c <GPIO_ExternalInterruptEventsCallback>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40010400 	.word	0x40010400

080044ac <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7ff ffe1 	bl	8004478 <GPIO_IRQHandling>
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}

080044ba <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_1);
 80044be:	2001      	movs	r0, #1
 80044c0:	f7ff ffda 	bl	8004478 <GPIO_IRQHandling>
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_2);
 80044cc:	2002      	movs	r0, #2
 80044ce:	f7ff ffd3 	bl	8004478 <GPIO_IRQHandling>
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_3);
 80044da:	2003      	movs	r0, #3
 80044dc:	f7ff ffcc 	bl	8004478 <GPIO_IRQHandling>
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 80044e8:	2004      	movs	r0, #4
 80044ea:	f7ff ffc5 	bl	8004478 <GPIO_IRQHandling>
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
	uint8_t pinNumber;
	for (uint8_t i = 5; i < 10; i++)
 80044fa:	2305      	movs	r3, #5
 80044fc:	71bb      	strb	r3, [r7, #6]
 80044fe:	e00e      	b.n	800451e <EXTI9_5_IRQHandler+0x2a>
	{
		if ((EXTI->PR >> i) & 1)
 8004500:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <EXTI9_5_IRQHandler+0x40>)
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	79bb      	ldrb	r3, [r7, #6]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <EXTI9_5_IRQHandler+0x24>
		{
			pinNumber = i;
 8004512:	79bb      	ldrb	r3, [r7, #6]
 8004514:	71fb      	strb	r3, [r7, #7]
			break;
 8004516:	e005      	b.n	8004524 <EXTI9_5_IRQHandler+0x30>
	for (uint8_t i = 5; i < 10; i++)
 8004518:	79bb      	ldrb	r3, [r7, #6]
 800451a:	3301      	adds	r3, #1
 800451c:	71bb      	strb	r3, [r7, #6]
 800451e:	79bb      	ldrb	r3, [r7, #6]
 8004520:	2b09      	cmp	r3, #9
 8004522:	d9ed      	bls.n	8004500 <EXTI9_5_IRQHandler+0xc>
		}
	}

	GPIO_IRQHandling(pinNumber);
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ffa6 	bl	8004478 <GPIO_IRQHandling>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40010400 	.word	0x40010400

08004538 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
	uint8_t pinNumber;
	for (uint8_t i = 10; i < 16; i++)
 800453e:	230a      	movs	r3, #10
 8004540:	71bb      	strb	r3, [r7, #6]
 8004542:	e00e      	b.n	8004562 <EXTI15_10_IRQHandler+0x2a>
	{
		if ((EXTI->PR >> i) & 1)
 8004544:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <EXTI15_10_IRQHandler+0x40>)
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	79bb      	ldrb	r3, [r7, #6]
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <EXTI15_10_IRQHandler+0x24>
		{
			pinNumber = i;
 8004556:	79bb      	ldrb	r3, [r7, #6]
 8004558:	71fb      	strb	r3, [r7, #7]
			break;
 800455a:	e005      	b.n	8004568 <EXTI15_10_IRQHandler+0x30>
	for (uint8_t i = 10; i < 16; i++)
 800455c:	79bb      	ldrb	r3, [r7, #6]
 800455e:	3301      	adds	r3, #1
 8004560:	71bb      	strb	r3, [r7, #6]
 8004562:	79bb      	ldrb	r3, [r7, #6]
 8004564:	2b0f      	cmp	r3, #15
 8004566:	d9ed      	bls.n	8004544 <EXTI15_10_IRQHandler+0xc>
		}
	}

	GPIO_IRQHandling(pinNumber);
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff84 	bl	8004478 <GPIO_IRQHandling>
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40010400 	.word	0x40010400

0800457c <GPIO_ExternalInterruptEventsCallback>:

__weak void GPIO_ExternalInterruptEventsCallback(uint8_t PinNumber) {}
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	2600      	movs	r6, #0
 8004594:	4d0c      	ldr	r5, [pc, #48]	@ (80045c8 <__libc_init_array+0x38>)
 8004596:	4c0d      	ldr	r4, [pc, #52]	@ (80045cc <__libc_init_array+0x3c>)
 8004598:	1b64      	subs	r4, r4, r5
 800459a:	10a4      	asrs	r4, r4, #2
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	f000 f81a 	bl	80045d8 <_init>
 80045a4:	2600      	movs	r6, #0
 80045a6:	4d0a      	ldr	r5, [pc, #40]	@ (80045d0 <__libc_init_array+0x40>)
 80045a8:	4c0a      	ldr	r4, [pc, #40]	@ (80045d4 <__libc_init_array+0x44>)
 80045aa:	1b64      	subs	r4, r4, r5
 80045ac:	10a4      	asrs	r4, r4, #2
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	080045f0 	.word	0x080045f0
 80045cc:	080045f0 	.word	0x080045f0
 80045d0:	080045f0 	.word	0x080045f0
 80045d4:	080045f4 	.word	0x080045f4

080045d8 <_init>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr

080045e4 <_fini>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr
